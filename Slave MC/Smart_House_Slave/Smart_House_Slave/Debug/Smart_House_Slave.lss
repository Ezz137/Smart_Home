
Smart_House_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000120c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000120c  000012a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800064  00800064  000012a4  2**0
                  ALLOC
  3 .stab         00001e84  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000037d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d9  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060f  00000000  00000000  00004a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba6  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00005c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc7  00000000  00000000  00006549  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_7>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	a8 04       	cpc	r10, r8
      56:	b6 04       	cpc	r11, r6
      58:	a1 04       	cpc	r10, r1
      5a:	cb 04       	cpc	r12, r11
      5c:	d9 04       	cpc	r13, r9
      5e:	c4 04       	cpc	r12, r4
      60:	ee 04       	cpc	r14, r14
      62:	fc 04       	cpc	r15, r12
      64:	e7 04       	cpc	r14, r7
      66:	11 05       	cpc	r17, r1
      68:	1f 05       	cpc	r17, r15
      6a:	0a 05       	cpc	r16, r10
      6c:	34 05       	cpc	r19, r4
      6e:	8e 04       	cpc	r8, r14
      70:	42 05       	cpc	r20, r2
      72:	2d 05       	cpc	r18, r13
      74:	55 05       	cpc	r21, r5
      76:	5e 05       	cpc	r21, r14
      78:	50 05       	cpc	r21, r0
      7a:	67 05       	cpc	r22, r7

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf e5       	ldi	r28, 0x5F	; 95
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	a0 e6       	ldi	r26, 0x60	; 96
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	ec e0       	ldi	r30, 0x0C	; 12
      90:	f2 e1       	ldi	r31, 0x12	; 18
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 36       	cpi	r26, 0x64	; 100
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	a4 e6       	ldi	r26, 0x64	; 100
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 36       	cpi	r26, 0x6C	; 108
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 1f 04 	call	0x83e	; 0x83e <main>
      b2:	0c 94 04 09 	jmp	0x1208	; 0x1208 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <ADC_vInit>:
#include "avr/io.h"

void ADC_vInit (void)
{
	//REFS1 & REFS0 ALL ZEROES MEANS VREF WILL BE VOLTAGE APPLIED ON VREF PIN
	SET_BIT(ADMUX,REFS0);//same value of AVCC WITH CAPACITOR ON VREF PIN
      ba:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);//BOTH ONES ON REFS0 AND REFS1 WILL Activate internal voltage 2.56 volt with putting cap. on vref pin
      bc:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN);//ENABLE ADC OF MICROCONTROLLER
      be:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADPS2);//CLOCK CYCLE 
      c0:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);//CLOCK CYCLE
      c2:	31 9a       	sbi	0x06, 1	; 6
	//SET_BIT(ADMUX,MUX4);//Differs between ADC0 AND ADC1
}
      c4:	08 95       	ret

000000c6 <ADC_uRead>:

unsigned short ADC_uRead (void)
{
	unsigned short Return_Valu=0;
	SET_BIT(ADCSRA,ADSC);
      c6:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADIF)==0);
      c8:	34 9b       	sbis	0x06, 4	; 6
      ca:	fe cf       	rjmp	.-4      	; 0xc8 <ADC_uRead+0x2>
	SET_BIT(ADCSRA,ADIF);
      cc:	34 9a       	sbi	0x06, 4	; 6
	Return_Valu=(unsigned short)ADCL;
      ce:	84 b1       	in	r24, 0x04	; 4
      d0:	90 e0       	ldi	r25, 0x00	; 0
	Return_Valu|=((unsigned short)ADCH<<8);
      d2:	45 b1       	in	r20, 0x05	; 5
      d4:	34 2f       	mov	r19, r20
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	82 2b       	or	r24, r18
      da:	93 2b       	or	r25, r19
	return Return_Valu;
      dc:	08 95       	ret

000000de <DC_Motor_vInit>:
#define AC_PIN 0
//#define HEATER_PIN 2

void DC_Motor_vInit (void)
{
	DIO_vSet_pin(MOTOR_PORT,AC_PIN,1);
      de:	83 e4       	ldi	r24, 0x43	; 67
      e0:	60 e0       	ldi	r22, 0x00	; 0
      e2:	41 e0       	ldi	r20, 0x01	; 1
      e4:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	DIO_vSet_pin(MOTOR_PORT,AC_PIN+1,1);
      e8:	83 e4       	ldi	r24, 0x43	; 67
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	//DIO_vSet_pin(MOTOR_PORT,HEATER_PIN,1);
	//DIO_vSet_pin(MOTOR_PORT,HEATER_PIN+1,1);
	Timer0_v_FastPWM();
      f2:	0e 94 43 06 	call	0xc86	; 0xc86 <Timer0_v_FastPWM>
	//Timer2_v_FastPWM();
}
      f6:	08 95       	ret

000000f8 <DC_Motor_AC_vSpeed_control>:

void DC_Motor_AC_vSpeed_control (unsigned char duty_cycle)
{
	Timer0_v_FastPWM_duty_cycle(duty_cycle);
      f8:	0e 94 67 06 	call	0xcce	; 0xcce <Timer0_v_FastPWM_duty_cycle>
}
      fc:	08 95       	ret

000000fe <DC_Motor_AC_vTurn_on_Anticlockwise>:
	Timer2_v_FastPWM_Duty_cycle(duty_cycle);
}*/

void DC_Motor_AC_vTurn_on_Anticlockwise (void)
{
	DIO_vWrite_pin(MOTOR_PORT,AC_PIN,1);
      fe:	83 e4       	ldi	r24, 0x43	; 67
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
	DIO_vWrite_pin(MOTOR_PORT,AC_PIN+1,0);
     108:	83 e4       	ldi	r24, 0x43	; 67
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	40 e0       	ldi	r20, 0x00	; 0
     10e:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
}
     112:	08 95       	ret

00000114 <DC_Motor_AC_vTurn_off>:
	DIO_vWrite_pin(MOTOR_PORT,HEATER_PIN+1,0);
}*/

void DC_Motor_AC_vTurn_off (void)
{
	DIO_vWrite_pin(MOTOR_PORT,AC_PIN,0);
     114:	83 e4       	ldi	r24, 0x43	; 67
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
	DIO_vWrite_pin(MOTOR_PORT,AC_PIN+1,0);
     11e:	83 e4       	ldi	r24, 0x43	; 67
     120:	61 e0       	ldi	r22, 0x01	; 1
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
	DC_Motor_AC_vSpeed_control(0);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 7c 00 	call	0xf8	; 0xf8 <DC_Motor_AC_vSpeed_control>
}
     12e:	08 95       	ret

00000130 <DIO_vSet_pin>:
#include "Std_macros.h"
#include "DIO.h"

void DIO_vSet_pin(unsigned char PORT,unsigned char pin,unsigned char InputOutput)
{
	switch(PORT)
     130:	84 34       	cpi	r24, 0x44	; 68
     132:	09 f4       	brne	.+2      	; 0x136 <DIO_vSet_pin+0x6>
     134:	71 c0       	rjmp	.+226    	; 0x218 <DIO_vSet_pin+0xe8>
     136:	85 34       	cpi	r24, 0x45	; 69
     138:	48 f4       	brcc	.+18     	; 0x14c <DIO_vSet_pin+0x1c>
     13a:	82 34       	cpi	r24, 0x42	; 66
     13c:	99 f1       	breq	.+102    	; 0x1a4 <DIO_vSet_pin+0x74>
     13e:	83 34       	cpi	r24, 0x43	; 67
     140:	08 f0       	brcs	.+2      	; 0x144 <DIO_vSet_pin+0x14>
     142:	4d c0       	rjmp	.+154    	; 0x1de <DIO_vSet_pin+0xae>
     144:	81 34       	cpi	r24, 0x41	; 65
     146:	09 f0       	breq	.+2      	; 0x14a <DIO_vSet_pin+0x1a>
     148:	83 c0       	rjmp	.+262    	; 0x250 <DIO_vSet_pin+0x120>
     14a:	0f c0       	rjmp	.+30     	; 0x16a <DIO_vSet_pin+0x3a>
     14c:	82 36       	cpi	r24, 0x62	; 98
     14e:	51 f1       	breq	.+84     	; 0x1a4 <DIO_vSet_pin+0x74>
     150:	83 36       	cpi	r24, 0x63	; 99
     152:	20 f4       	brcc	.+8      	; 0x15c <DIO_vSet_pin+0x2c>
     154:	81 36       	cpi	r24, 0x61	; 97
     156:	09 f0       	breq	.+2      	; 0x15a <DIO_vSet_pin+0x2a>
     158:	7b c0       	rjmp	.+246    	; 0x250 <DIO_vSet_pin+0x120>
     15a:	07 c0       	rjmp	.+14     	; 0x16a <DIO_vSet_pin+0x3a>
     15c:	83 36       	cpi	r24, 0x63	; 99
     15e:	09 f4       	brne	.+2      	; 0x162 <DIO_vSet_pin+0x32>
     160:	3e c0       	rjmp	.+124    	; 0x1de <DIO_vSet_pin+0xae>
     162:	84 36       	cpi	r24, 0x64	; 100
     164:	09 f0       	breq	.+2      	; 0x168 <DIO_vSet_pin+0x38>
     166:	74 c0       	rjmp	.+232    	; 0x250 <DIO_vSet_pin+0x120>
     168:	57 c0       	rjmp	.+174    	; 0x218 <DIO_vSet_pin+0xe8>
	{
		case 'A':
		case 'a':
		{
			if (InputOutput==1)
     16a:	41 30       	cpi	r20, 0x01	; 1
     16c:	69 f4       	brne	.+26     	; 0x188 <DIO_vSet_pin+0x58>
			{
				SET_BIT(DDRA,pin);
     16e:	2a b3       	in	r18, 0x1a	; 26
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	ac 01       	movw	r20, r24
     176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vSet_pin+0x4c>
     178:	44 0f       	add	r20, r20
     17a:	55 1f       	adc	r21, r21
     17c:	6a 95       	dec	r22
     17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vSet_pin+0x48>
     180:	ba 01       	movw	r22, r20
     182:	62 2b       	or	r22, r18
     184:	6a bb       	out	0x1a, r22	; 26
     186:	08 95       	ret
			} 
			else
			{
				CLR_BIT(DDRA,pin);
     188:	2a b3       	in	r18, 0x1a	; 26
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	ac 01       	movw	r20, r24
     190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_vSet_pin+0x66>
     192:	44 0f       	add	r20, r20
     194:	55 1f       	adc	r21, r21
     196:	6a 95       	dec	r22
     198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_vSet_pin+0x62>
     19a:	ba 01       	movw	r22, r20
     19c:	60 95       	com	r22
     19e:	62 23       	and	r22, r18
     1a0:	6a bb       	out	0x1a, r22	; 26
     1a2:	08 95       	ret
			break;
		}
		case 'B':
		case 'b':
		{
			if (InputOutput==1)
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	69 f4       	brne	.+26     	; 0x1c2 <DIO_vSet_pin+0x92>
			{
				SET_BIT(DDRB,pin);
     1a8:	27 b3       	in	r18, 0x17	; 23
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	ac 01       	movw	r20, r24
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_vSet_pin+0x86>
     1b2:	44 0f       	add	r20, r20
     1b4:	55 1f       	adc	r21, r21
     1b6:	6a 95       	dec	r22
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_vSet_pin+0x82>
     1ba:	ba 01       	movw	r22, r20
     1bc:	62 2b       	or	r22, r18
     1be:	67 bb       	out	0x17, r22	; 23
     1c0:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB,pin);
     1c2:	27 b3       	in	r18, 0x17	; 23
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	ac 01       	movw	r20, r24
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSet_pin+0xa0>
     1cc:	44 0f       	add	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSet_pin+0x9c>
     1d4:	ba 01       	movw	r22, r20
     1d6:	60 95       	com	r22
     1d8:	62 23       	and	r22, r18
     1da:	67 bb       	out	0x17, r22	; 23
     1dc:	08 95       	ret
			break;
		}
		case 'C':
		case 'c':
		{
			if (InputOutput==1)
     1de:	41 30       	cpi	r20, 0x01	; 1
     1e0:	69 f4       	brne	.+26     	; 0x1fc <DIO_vSet_pin+0xcc>
			{
				SET_BIT(DDRC,pin);
     1e2:	24 b3       	in	r18, 0x14	; 20
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	ac 01       	movw	r20, r24
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_vSet_pin+0xc0>
     1ec:	44 0f       	add	r20, r20
     1ee:	55 1f       	adc	r21, r21
     1f0:	6a 95       	dec	r22
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_vSet_pin+0xbc>
     1f4:	ba 01       	movw	r22, r20
     1f6:	62 2b       	or	r22, r18
     1f8:	64 bb       	out	0x14, r22	; 20
     1fa:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC,pin);
     1fc:	24 b3       	in	r18, 0x14	; 20
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	ac 01       	movw	r20, r24
     204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_vSet_pin+0xda>
     206:	44 0f       	add	r20, r20
     208:	55 1f       	adc	r21, r21
     20a:	6a 95       	dec	r22
     20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_vSet_pin+0xd6>
     20e:	ba 01       	movw	r22, r20
     210:	60 95       	com	r22
     212:	62 23       	and	r22, r18
     214:	64 bb       	out	0x14, r22	; 20
     216:	08 95       	ret
			break;
		}
		case 'D':
		case 'd':
		{
			if (InputOutput==1)
     218:	41 30       	cpi	r20, 0x01	; 1
     21a:	69 f4       	brne	.+26     	; 0x236 <DIO_vSet_pin+0x106>
			{
				SET_BIT(DDRD,pin);
     21c:	21 b3       	in	r18, 0x11	; 17
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	ac 01       	movw	r20, r24
     224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vSet_pin+0xfa>
     226:	44 0f       	add	r20, r20
     228:	55 1f       	adc	r21, r21
     22a:	6a 95       	dec	r22
     22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vSet_pin+0xf6>
     22e:	ba 01       	movw	r22, r20
     230:	62 2b       	or	r22, r18
     232:	61 bb       	out	0x11, r22	; 17
     234:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,pin);
     236:	21 b3       	in	r18, 0x11	; 17
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	ac 01       	movw	r20, r24
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_vSet_pin+0x114>
     240:	44 0f       	add	r20, r20
     242:	55 1f       	adc	r21, r21
     244:	6a 95       	dec	r22
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_vSet_pin+0x110>
     248:	ba 01       	movw	r22, r20
     24a:	60 95       	com	r22
     24c:	62 23       	and	r22, r18
     24e:	61 bb       	out	0x11, r22	; 17
     250:	08 95       	ret

00000252 <DIO_vWrite_pin>:
	}	
}

void DIO_vWrite_pin (unsigned char PORT,unsigned char pin,unsigned char DIR)
{
	switch(PORT)
     252:	84 34       	cpi	r24, 0x44	; 68
     254:	09 f4       	brne	.+2      	; 0x258 <DIO_vWrite_pin+0x6>
     256:	71 c0       	rjmp	.+226    	; 0x33a <DIO_vWrite_pin+0xe8>
     258:	85 34       	cpi	r24, 0x45	; 69
     25a:	48 f4       	brcc	.+18     	; 0x26e <DIO_vWrite_pin+0x1c>
     25c:	82 34       	cpi	r24, 0x42	; 66
     25e:	99 f1       	breq	.+102    	; 0x2c6 <DIO_vWrite_pin+0x74>
     260:	83 34       	cpi	r24, 0x43	; 67
     262:	08 f0       	brcs	.+2      	; 0x266 <DIO_vWrite_pin+0x14>
     264:	4d c0       	rjmp	.+154    	; 0x300 <DIO_vWrite_pin+0xae>
     266:	81 34       	cpi	r24, 0x41	; 65
     268:	09 f0       	breq	.+2      	; 0x26c <DIO_vWrite_pin+0x1a>
     26a:	83 c0       	rjmp	.+262    	; 0x372 <DIO_vWrite_pin+0x120>
     26c:	0f c0       	rjmp	.+30     	; 0x28c <DIO_vWrite_pin+0x3a>
     26e:	82 36       	cpi	r24, 0x62	; 98
     270:	51 f1       	breq	.+84     	; 0x2c6 <DIO_vWrite_pin+0x74>
     272:	83 36       	cpi	r24, 0x63	; 99
     274:	20 f4       	brcc	.+8      	; 0x27e <DIO_vWrite_pin+0x2c>
     276:	81 36       	cpi	r24, 0x61	; 97
     278:	09 f0       	breq	.+2      	; 0x27c <DIO_vWrite_pin+0x2a>
     27a:	7b c0       	rjmp	.+246    	; 0x372 <DIO_vWrite_pin+0x120>
     27c:	07 c0       	rjmp	.+14     	; 0x28c <DIO_vWrite_pin+0x3a>
     27e:	83 36       	cpi	r24, 0x63	; 99
     280:	09 f4       	brne	.+2      	; 0x284 <DIO_vWrite_pin+0x32>
     282:	3e c0       	rjmp	.+124    	; 0x300 <DIO_vWrite_pin+0xae>
     284:	84 36       	cpi	r24, 0x64	; 100
     286:	09 f0       	breq	.+2      	; 0x28a <DIO_vWrite_pin+0x38>
     288:	74 c0       	rjmp	.+232    	; 0x372 <DIO_vWrite_pin+0x120>
     28a:	57 c0       	rjmp	.+174    	; 0x33a <DIO_vWrite_pin+0xe8>
	{
		case 'A':
		case 'a':
		{
			if (DIR==1)
     28c:	41 30       	cpi	r20, 0x01	; 1
     28e:	69 f4       	brne	.+26     	; 0x2aa <DIO_vWrite_pin+0x58>
			{
				SET_BIT(PORTA,pin);
     290:	2b b3       	in	r18, 0x1b	; 27
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	ac 01       	movw	r20, r24
     298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_vWrite_pin+0x4c>
     29a:	44 0f       	add	r20, r20
     29c:	55 1f       	adc	r21, r21
     29e:	6a 95       	dec	r22
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_vWrite_pin+0x48>
     2a2:	ba 01       	movw	r22, r20
     2a4:	62 2b       	or	r22, r18
     2a6:	6b bb       	out	0x1b, r22	; 27
     2a8:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,pin);
     2aa:	2b b3       	in	r18, 0x1b	; 27
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	ac 01       	movw	r20, r24
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_vWrite_pin+0x66>
     2b4:	44 0f       	add	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_vWrite_pin+0x62>
     2bc:	ba 01       	movw	r22, r20
     2be:	60 95       	com	r22
     2c0:	62 23       	and	r22, r18
     2c2:	6b bb       	out	0x1b, r22	; 27
     2c4:	08 95       	ret
			break;
		}
		case 'B':
		case 'b':
		{
			if (DIR==1)
     2c6:	41 30       	cpi	r20, 0x01	; 1
     2c8:	69 f4       	brne	.+26     	; 0x2e4 <DIO_vWrite_pin+0x92>
			{
				SET_BIT(PORTB,pin);
     2ca:	28 b3       	in	r18, 0x18	; 24
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	ac 01       	movw	r20, r24
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_vWrite_pin+0x86>
     2d4:	44 0f       	add	r20, r20
     2d6:	55 1f       	adc	r21, r21
     2d8:	6a 95       	dec	r22
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_vWrite_pin+0x82>
     2dc:	ba 01       	movw	r22, r20
     2de:	62 2b       	or	r22, r18
     2e0:	68 bb       	out	0x18, r22	; 24
     2e2:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pin);
     2e4:	28 b3       	in	r18, 0x18	; 24
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	ac 01       	movw	r20, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_vWrite_pin+0xa0>
     2ee:	44 0f       	add	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	6a 95       	dec	r22
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_vWrite_pin+0x9c>
     2f6:	ba 01       	movw	r22, r20
     2f8:	60 95       	com	r22
     2fa:	62 23       	and	r22, r18
     2fc:	68 bb       	out	0x18, r22	; 24
     2fe:	08 95       	ret
			break;
		}
		case 'C':
		case 'c':
		{
			if (DIR==1)
     300:	41 30       	cpi	r20, 0x01	; 1
     302:	69 f4       	brne	.+26     	; 0x31e <DIO_vWrite_pin+0xcc>
			{
				SET_BIT(PORTC,pin);
     304:	25 b3       	in	r18, 0x15	; 21
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	ac 01       	movw	r20, r24
     30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_vWrite_pin+0xc0>
     30e:	44 0f       	add	r20, r20
     310:	55 1f       	adc	r21, r21
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_vWrite_pin+0xbc>
     316:	ba 01       	movw	r22, r20
     318:	62 2b       	or	r22, r18
     31a:	65 bb       	out	0x15, r22	; 21
     31c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,pin);
     31e:	25 b3       	in	r18, 0x15	; 21
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	ac 01       	movw	r20, r24
     326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_vWrite_pin+0xda>
     328:	44 0f       	add	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_vWrite_pin+0xd6>
     330:	ba 01       	movw	r22, r20
     332:	60 95       	com	r22
     334:	62 23       	and	r22, r18
     336:	65 bb       	out	0x15, r22	; 21
     338:	08 95       	ret
			break;
		}
		case 'D':
		case 'd':
		{
			if (DIR==1)
     33a:	41 30       	cpi	r20, 0x01	; 1
     33c:	69 f4       	brne	.+26     	; 0x358 <DIO_vWrite_pin+0x106>
			{
				SET_BIT(PORTD,pin);
     33e:	22 b3       	in	r18, 0x12	; 18
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	ac 01       	movw	r20, r24
     346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_vWrite_pin+0xfa>
     348:	44 0f       	add	r20, r20
     34a:	55 1f       	adc	r21, r21
     34c:	6a 95       	dec	r22
     34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_vWrite_pin+0xf6>
     350:	ba 01       	movw	r22, r20
     352:	62 2b       	or	r22, r18
     354:	62 bb       	out	0x12, r22	; 18
     356:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,pin);
     358:	22 b3       	in	r18, 0x12	; 18
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	ac 01       	movw	r20, r24
     360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_vWrite_pin+0x114>
     362:	44 0f       	add	r20, r20
     364:	55 1f       	adc	r21, r21
     366:	6a 95       	dec	r22
     368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_vWrite_pin+0x110>
     36a:	ba 01       	movw	r22, r20
     36c:	60 95       	com	r22
     36e:	62 23       	and	r22, r18
     370:	62 bb       	out	0x12, r22	; 18
     372:	08 95       	ret

00000374 <DIO_uRead_pin>:
}

unsigned char DIO_uRead_pin(unsigned char PORT,unsigned char pin)
{
	unsigned char Return_Valu=0;
	switch(PORT)
     374:	84 34       	cpi	r24, 0x44	; 68
     376:	09 f4       	brne	.+2      	; 0x37a <DIO_uRead_pin+0x6>
     378:	4e c0       	rjmp	.+156    	; 0x416 <DIO_uRead_pin+0xa2>
     37a:	85 34       	cpi	r24, 0x45	; 69
     37c:	40 f4       	brcc	.+16     	; 0x38e <DIO_uRead_pin+0x1a>
     37e:	82 34       	cpi	r24, 0x42	; 66
     380:	31 f1       	breq	.+76     	; 0x3ce <DIO_uRead_pin+0x5a>
     382:	83 34       	cpi	r24, 0x43	; 67
     384:	b0 f5       	brcc	.+108    	; 0x3f2 <DIO_uRead_pin+0x7e>
     386:	81 34       	cpi	r24, 0x41	; 65
     388:	09 f0       	breq	.+2      	; 0x38c <DIO_uRead_pin+0x18>
     38a:	57 c0       	rjmp	.+174    	; 0x43a <DIO_uRead_pin+0xc6>
     38c:	0e c0       	rjmp	.+28     	; 0x3aa <DIO_uRead_pin+0x36>
     38e:	82 36       	cpi	r24, 0x62	; 98
     390:	f1 f0       	breq	.+60     	; 0x3ce <DIO_uRead_pin+0x5a>
     392:	83 36       	cpi	r24, 0x63	; 99
     394:	20 f4       	brcc	.+8      	; 0x39e <DIO_uRead_pin+0x2a>
     396:	81 36       	cpi	r24, 0x61	; 97
     398:	09 f0       	breq	.+2      	; 0x39c <DIO_uRead_pin+0x28>
     39a:	4f c0       	rjmp	.+158    	; 0x43a <DIO_uRead_pin+0xc6>
     39c:	06 c0       	rjmp	.+12     	; 0x3aa <DIO_uRead_pin+0x36>
     39e:	83 36       	cpi	r24, 0x63	; 99
     3a0:	41 f1       	breq	.+80     	; 0x3f2 <DIO_uRead_pin+0x7e>
     3a2:	84 36       	cpi	r24, 0x64	; 100
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <DIO_uRead_pin+0x34>
     3a6:	49 c0       	rjmp	.+146    	; 0x43a <DIO_uRead_pin+0xc6>
     3a8:	36 c0       	rjmp	.+108    	; 0x416 <DIO_uRead_pin+0xa2>
	{
		case 'a':
		case 'A':
		{
			Return_Valu=READ_BIT(PINA,pin);
     3aa:	29 b3       	in	r18, 0x19	; 25
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	06 2e       	mov	r0, r22
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_uRead_pin+0x44>
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	0a 94       	dec	r0
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_uRead_pin+0x40>
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	82 23       	and	r24, r18
     3c0:	93 23       	and	r25, r19
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_uRead_pin+0x54>
     3c4:	95 95       	asr	r25
     3c6:	87 95       	ror	r24
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_uRead_pin+0x50>
			break;
     3cc:	08 95       	ret
		}
		case 'B':
		case 'b':
		{
			Return_Valu=READ_BIT(PINB,pin);
     3ce:	26 b3       	in	r18, 0x16	; 22
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	06 2e       	mov	r0, r22
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_uRead_pin+0x68>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_uRead_pin+0x64>
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	82 23       	and	r24, r18
     3e4:	93 23       	and	r25, r19
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_uRead_pin+0x78>
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_uRead_pin+0x74>
			break;
     3f0:	08 95       	ret
		}
		case 'C':
		case 'c':
		{
			Return_Valu=READ_BIT(PINC,pin);
     3f2:	23 b3       	in	r18, 0x13	; 19
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	06 2e       	mov	r0, r22
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_uRead_pin+0x8c>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_uRead_pin+0x88>
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	82 23       	and	r24, r18
     408:	93 23       	and	r25, r19
     40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_uRead_pin+0x9c>
     40c:	95 95       	asr	r25
     40e:	87 95       	ror	r24
     410:	6a 95       	dec	r22
     412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_uRead_pin+0x98>
			break;
     414:	08 95       	ret
		}
		case 'd':
		case 'D':
		{
			Return_Valu=READ_BIT(PIND,pin);
     416:	20 b3       	in	r18, 0x10	; 16
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	06 2e       	mov	r0, r22
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_uRead_pin+0xb0>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	0a 94       	dec	r0
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_uRead_pin+0xac>
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	82 23       	and	r24, r18
     42c:	93 23       	and	r25, r19
     42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_uRead_pin+0xc0>
     430:	95 95       	asr	r25
     432:	87 95       	ror	r24
     434:	6a 95       	dec	r22
     436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_uRead_pin+0xbc>
			break;
     438:	08 95       	ret
	}
}

unsigned char DIO_uRead_pin(unsigned char PORT,unsigned char pin)
{
	unsigned char Return_Valu=0;
     43a:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	}
	return Return_Valu;
}
     43c:	08 95       	ret

0000043e <DIO_vTog_pin>:

void DIO_vTog_pin (unsigned char PORT, unsigned char pin)
{
	switch(PORT)
     43e:	84 34       	cpi	r24, 0x44	; 68
     440:	09 f4       	brne	.+2      	; 0x444 <DIO_vTog_pin+0x6>
     442:	3d c0       	rjmp	.+122    	; 0x4be <DIO_vTog_pin+0x80>
     444:	85 34       	cpi	r24, 0x45	; 69
     446:	40 f4       	brcc	.+16     	; 0x458 <DIO_vTog_pin+0x1a>
     448:	82 34       	cpi	r24, 0x42	; 66
     44a:	f9 f0       	breq	.+62     	; 0x48a <DIO_vTog_pin+0x4c>
     44c:	83 34       	cpi	r24, 0x43	; 67
     44e:	50 f5       	brcc	.+84     	; 0x4a4 <DIO_vTog_pin+0x66>
     450:	81 34       	cpi	r24, 0x41	; 65
     452:	09 f0       	breq	.+2      	; 0x456 <DIO_vTog_pin+0x18>
     454:	40 c0       	rjmp	.+128    	; 0x4d6 <DIO_vTog_pin+0x98>
     456:	0c c0       	rjmp	.+24     	; 0x470 <DIO_vTog_pin+0x32>
     458:	82 36       	cpi	r24, 0x62	; 98
     45a:	b9 f0       	breq	.+46     	; 0x48a <DIO_vTog_pin+0x4c>
     45c:	83 36       	cpi	r24, 0x63	; 99
     45e:	18 f4       	brcc	.+6      	; 0x466 <DIO_vTog_pin+0x28>
     460:	81 36       	cpi	r24, 0x61	; 97
     462:	c9 f5       	brne	.+114    	; 0x4d6 <DIO_vTog_pin+0x98>
     464:	05 c0       	rjmp	.+10     	; 0x470 <DIO_vTog_pin+0x32>
     466:	83 36       	cpi	r24, 0x63	; 99
     468:	e9 f0       	breq	.+58     	; 0x4a4 <DIO_vTog_pin+0x66>
     46a:	84 36       	cpi	r24, 0x64	; 100
     46c:	a1 f5       	brne	.+104    	; 0x4d6 <DIO_vTog_pin+0x98>
     46e:	27 c0       	rjmp	.+78     	; 0x4be <DIO_vTog_pin+0x80>
	{
		case 'A':
		case 'a':
		{
			TOG_BIT(PORTA,pin);
     470:	2b b3       	in	r18, 0x1b	; 27
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	ac 01       	movw	r20, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_vTog_pin+0x40>
     47a:	44 0f       	add	r20, r20
     47c:	55 1f       	adc	r21, r21
     47e:	6a 95       	dec	r22
     480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_vTog_pin+0x3c>
     482:	ba 01       	movw	r22, r20
     484:	62 27       	eor	r22, r18
     486:	6b bb       	out	0x1b, r22	; 27
			break;
     488:	08 95       	ret
		}
		case 'B':
		case 'b':
		{
			TOG_BIT(PORTB,pin);
     48a:	28 b3       	in	r18, 0x18	; 24
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	ac 01       	movw	r20, r24
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_vTog_pin+0x5a>
     494:	44 0f       	add	r20, r20
     496:	55 1f       	adc	r21, r21
     498:	6a 95       	dec	r22
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_vTog_pin+0x56>
     49c:	ba 01       	movw	r22, r20
     49e:	62 27       	eor	r22, r18
     4a0:	68 bb       	out	0x18, r22	; 24
			break;
     4a2:	08 95       	ret
		}
		case 'C':
		case 'c':
		{
			TOG_BIT(PORTC,pin);
     4a4:	25 b3       	in	r18, 0x15	; 21
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	ac 01       	movw	r20, r24
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_vTog_pin+0x74>
     4ae:	44 0f       	add	r20, r20
     4b0:	55 1f       	adc	r21, r21
     4b2:	6a 95       	dec	r22
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_vTog_pin+0x70>
     4b6:	ba 01       	movw	r22, r20
     4b8:	62 27       	eor	r22, r18
     4ba:	65 bb       	out	0x15, r22	; 21
			break;
     4bc:	08 95       	ret
		}
		case 'D':
		case 'd':
		{
			TOG_BIT(PORTD,pin);
     4be:	22 b3       	in	r18, 0x12	; 18
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	ac 01       	movw	r20, r24
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_vTog_pin+0x8e>
     4c8:	44 0f       	add	r20, r20
     4ca:	55 1f       	adc	r21, r21
     4cc:	6a 95       	dec	r22
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_vTog_pin+0x8a>
     4d0:	ba 01       	movw	r22, r20
     4d2:	62 27       	eor	r22, r18
     4d4:	62 bb       	out	0x12, r22	; 18
     4d6:	08 95       	ret

000004d8 <DIO_vSet_port>:
	}
}

void DIO_vSet_port (unsigned char PORT, unsigned char InputOutput)
{
	switch(PORT)
     4d8:	84 34       	cpi	r24, 0x44	; 68
     4da:	d9 f0       	breq	.+54     	; 0x512 <DIO_vSet_port+0x3a>
     4dc:	85 34       	cpi	r24, 0x45	; 69
     4de:	38 f4       	brcc	.+14     	; 0x4ee <DIO_vSet_port+0x16>
     4e0:	82 34       	cpi	r24, 0x42	; 66
     4e2:	99 f0       	breq	.+38     	; 0x50a <DIO_vSet_port+0x32>
     4e4:	83 34       	cpi	r24, 0x43	; 67
     4e6:	98 f4       	brcc	.+38     	; 0x50e <DIO_vSet_port+0x36>
     4e8:	81 34       	cpi	r24, 0x41	; 65
     4ea:	a1 f4       	brne	.+40     	; 0x514 <DIO_vSet_port+0x3c>
     4ec:	0c c0       	rjmp	.+24     	; 0x506 <DIO_vSet_port+0x2e>
     4ee:	82 36       	cpi	r24, 0x62	; 98
     4f0:	61 f0       	breq	.+24     	; 0x50a <DIO_vSet_port+0x32>
     4f2:	83 36       	cpi	r24, 0x63	; 99
     4f4:	18 f4       	brcc	.+6      	; 0x4fc <DIO_vSet_port+0x24>
     4f6:	81 36       	cpi	r24, 0x61	; 97
     4f8:	69 f4       	brne	.+26     	; 0x514 <DIO_vSet_port+0x3c>
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <DIO_vSet_port+0x2e>
     4fc:	83 36       	cpi	r24, 0x63	; 99
     4fe:	39 f0       	breq	.+14     	; 0x50e <DIO_vSet_port+0x36>
     500:	84 36       	cpi	r24, 0x64	; 100
     502:	41 f4       	brne	.+16     	; 0x514 <DIO_vSet_port+0x3c>
     504:	06 c0       	rjmp	.+12     	; 0x512 <DIO_vSet_port+0x3a>
	{
		case 'A':
		case 'a':
		{
			DDRA=InputOutput;
     506:	6a bb       	out	0x1a, r22	; 26
			break;
     508:	08 95       	ret
		}
		case 'B':
		case 'b':
		{
			DDRB=InputOutput;
     50a:	67 bb       	out	0x17, r22	; 23
			break;
     50c:	08 95       	ret
		}
		case 'C':
		case 'c':
		{
			DDRC=InputOutput;
     50e:	64 bb       	out	0x14, r22	; 20
			break;
     510:	08 95       	ret
		}
		case 'D':
		case 'd':
		{
			DDRD=InputOutput;
     512:	61 bb       	out	0x11, r22	; 17
     514:	08 95       	ret

00000516 <DIO_vWrite_port>:
	}
}

void DIO_vWrite_port (unsigned char PORT,unsigned char portvalue)
{
	switch(PORT)
     516:	84 34       	cpi	r24, 0x44	; 68
     518:	d9 f0       	breq	.+54     	; 0x550 <DIO_vWrite_port+0x3a>
     51a:	85 34       	cpi	r24, 0x45	; 69
     51c:	38 f4       	brcc	.+14     	; 0x52c <DIO_vWrite_port+0x16>
     51e:	82 34       	cpi	r24, 0x42	; 66
     520:	99 f0       	breq	.+38     	; 0x548 <DIO_vWrite_port+0x32>
     522:	83 34       	cpi	r24, 0x43	; 67
     524:	98 f4       	brcc	.+38     	; 0x54c <DIO_vWrite_port+0x36>
     526:	81 34       	cpi	r24, 0x41	; 65
     528:	a1 f4       	brne	.+40     	; 0x552 <DIO_vWrite_port+0x3c>
     52a:	0c c0       	rjmp	.+24     	; 0x544 <DIO_vWrite_port+0x2e>
     52c:	82 36       	cpi	r24, 0x62	; 98
     52e:	61 f0       	breq	.+24     	; 0x548 <DIO_vWrite_port+0x32>
     530:	83 36       	cpi	r24, 0x63	; 99
     532:	18 f4       	brcc	.+6      	; 0x53a <DIO_vWrite_port+0x24>
     534:	81 36       	cpi	r24, 0x61	; 97
     536:	69 f4       	brne	.+26     	; 0x552 <DIO_vWrite_port+0x3c>
     538:	05 c0       	rjmp	.+10     	; 0x544 <DIO_vWrite_port+0x2e>
     53a:	83 36       	cpi	r24, 0x63	; 99
     53c:	39 f0       	breq	.+14     	; 0x54c <DIO_vWrite_port+0x36>
     53e:	84 36       	cpi	r24, 0x64	; 100
     540:	41 f4       	brne	.+16     	; 0x552 <DIO_vWrite_port+0x3c>
     542:	06 c0       	rjmp	.+12     	; 0x550 <DIO_vWrite_port+0x3a>
	{
		case 'A':
		case 'a':
		{
			PORTA=portvalue;
     544:	6b bb       	out	0x1b, r22	; 27
			break;
     546:	08 95       	ret
		}
		case 'B':
		case 'b':
		{
			PORTB=portvalue;
     548:	68 bb       	out	0x18, r22	; 24
			break;
     54a:	08 95       	ret
		}
		case 'C':
		case 'c':
		{
			PORTC=portvalue;
     54c:	65 bb       	out	0x15, r22	; 21
			break;
     54e:	08 95       	ret
		}
		case 'D':
		case 'd':
		{
			PORTD=portvalue;
     550:	62 bb       	out	0x12, r22	; 18
     552:	08 95       	ret

00000554 <DIO_uRead_port>:
}

unsigned char DIO_uRead_port (unsigned char PORT)
{
	unsigned char Return_valu=0;
	switch(PORT)
     554:	84 34       	cpi	r24, 0x44	; 68
     556:	d9 f0       	breq	.+54     	; 0x58e <DIO_uRead_port+0x3a>
     558:	85 34       	cpi	r24, 0x45	; 69
     55a:	38 f4       	brcc	.+14     	; 0x56a <DIO_uRead_port+0x16>
     55c:	82 34       	cpi	r24, 0x42	; 66
     55e:	99 f0       	breq	.+38     	; 0x586 <DIO_uRead_port+0x32>
     560:	83 34       	cpi	r24, 0x43	; 67
     562:	98 f4       	brcc	.+38     	; 0x58a <DIO_uRead_port+0x36>
     564:	81 34       	cpi	r24, 0x41	; 65
     566:	a9 f4       	brne	.+42     	; 0x592 <DIO_uRead_port+0x3e>
     568:	0c c0       	rjmp	.+24     	; 0x582 <DIO_uRead_port+0x2e>
     56a:	82 36       	cpi	r24, 0x62	; 98
     56c:	61 f0       	breq	.+24     	; 0x586 <DIO_uRead_port+0x32>
     56e:	83 36       	cpi	r24, 0x63	; 99
     570:	18 f4       	brcc	.+6      	; 0x578 <DIO_uRead_port+0x24>
     572:	81 36       	cpi	r24, 0x61	; 97
     574:	71 f4       	brne	.+28     	; 0x592 <DIO_uRead_port+0x3e>
     576:	05 c0       	rjmp	.+10     	; 0x582 <DIO_uRead_port+0x2e>
     578:	83 36       	cpi	r24, 0x63	; 99
     57a:	39 f0       	breq	.+14     	; 0x58a <DIO_uRead_port+0x36>
     57c:	84 36       	cpi	r24, 0x64	; 100
     57e:	49 f4       	brne	.+18     	; 0x592 <DIO_uRead_port+0x3e>
     580:	06 c0       	rjmp	.+12     	; 0x58e <DIO_uRead_port+0x3a>
	{
		case 'A':
		case 'a':
		{
			Return_valu=PINA;
     582:	89 b3       	in	r24, 0x19	; 25
			break;
     584:	08 95       	ret
		}
		case 'B':
		case 'b':
		{
			Return_valu=PINB;
     586:	86 b3       	in	r24, 0x16	; 22
			break;
     588:	08 95       	ret
		}
		case 'C':
		case 'c':
		{
			Return_valu=PINC;
     58a:	83 b3       	in	r24, 0x13	; 19
			break;
     58c:	08 95       	ret
		}
		case 'D':
		case 'd':
		{
			Return_valu=PIND;
     58e:	80 b3       	in	r24, 0x10	; 16
			break;
     590:	08 95       	ret
	}
}

unsigned char DIO_uRead_port (unsigned char PORT)
{
	unsigned char Return_valu=0;
     592:	80 e0       	ldi	r24, 0x00	; 0
		{
			break;
		}
	}
	return Return_valu;
}
     594:	08 95       	ret

00000596 <DIO_vTog_port>:

void DIO_vTog_port (unsigned char PORT)
{
	switch(PORT)
     596:	84 34       	cpi	r24, 0x44	; 68
     598:	09 f1       	breq	.+66     	; 0x5dc <DIO_vTog_port+0x46>
     59a:	85 34       	cpi	r24, 0x45	; 69
     59c:	38 f4       	brcc	.+14     	; 0x5ac <DIO_vTog_port+0x16>
     59e:	82 34       	cpi	r24, 0x42	; 66
     5a0:	a9 f0       	breq	.+42     	; 0x5cc <DIO_vTog_port+0x36>
     5a2:	83 34       	cpi	r24, 0x43	; 67
     5a4:	b8 f4       	brcc	.+46     	; 0x5d4 <DIO_vTog_port+0x3e>
     5a6:	81 34       	cpi	r24, 0x41	; 65
     5a8:	e1 f4       	brne	.+56     	; 0x5e2 <DIO_vTog_port+0x4c>
     5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <DIO_vTog_port+0x2e>
     5ac:	82 36       	cpi	r24, 0x62	; 98
     5ae:	71 f0       	breq	.+28     	; 0x5cc <DIO_vTog_port+0x36>
     5b0:	83 36       	cpi	r24, 0x63	; 99
     5b2:	18 f4       	brcc	.+6      	; 0x5ba <DIO_vTog_port+0x24>
     5b4:	81 36       	cpi	r24, 0x61	; 97
     5b6:	a9 f4       	brne	.+42     	; 0x5e2 <DIO_vTog_port+0x4c>
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <DIO_vTog_port+0x2e>
     5ba:	83 36       	cpi	r24, 0x63	; 99
     5bc:	59 f0       	breq	.+22     	; 0x5d4 <DIO_vTog_port+0x3e>
     5be:	84 36       	cpi	r24, 0x64	; 100
     5c0:	81 f4       	brne	.+32     	; 0x5e2 <DIO_vTog_port+0x4c>
     5c2:	0c c0       	rjmp	.+24     	; 0x5dc <DIO_vTog_port+0x46>
	{
		case 'A':
		case 'a':
		{
			PORTA=~PORTA;
     5c4:	8b b3       	in	r24, 0x1b	; 27
     5c6:	80 95       	com	r24
     5c8:	8b bb       	out	0x1b, r24	; 27
			break;
     5ca:	08 95       	ret
		}
		case 'B':
		case 'b':
		{
			PORTB=~PORTB;
     5cc:	88 b3       	in	r24, 0x18	; 24
     5ce:	80 95       	com	r24
     5d0:	88 bb       	out	0x18, r24	; 24
			break;
     5d2:	08 95       	ret
		}
		case 'C':
		case 'c':
		{
			PORTC=~PORTC;
     5d4:	85 b3       	in	r24, 0x15	; 21
     5d6:	80 95       	com	r24
     5d8:	85 bb       	out	0x15, r24	; 21
			break;
     5da:	08 95       	ret
		}
		case 'D':
		case 'd':
		{
			PORTD=~PORTD;
     5dc:	82 b3       	in	r24, 0x12	; 18
     5de:	80 95       	com	r24
     5e0:	82 bb       	out	0x12, r24	; 18
     5e2:	08 95       	ret

000005e4 <DIO_vInternalpullup>:
	}
}

void DIO_vInternalpullup (unsigned char PORT,unsigned char pin,unsigned char DIR)
{
	switch(PORT)
     5e4:	84 34       	cpi	r24, 0x44	; 68
     5e6:	09 f4       	brne	.+2      	; 0x5ea <DIO_vInternalpullup+0x6>
     5e8:	71 c0       	rjmp	.+226    	; 0x6cc <DIO_vInternalpullup+0xe8>
     5ea:	85 34       	cpi	r24, 0x45	; 69
     5ec:	48 f4       	brcc	.+18     	; 0x600 <DIO_vInternalpullup+0x1c>
     5ee:	82 34       	cpi	r24, 0x42	; 66
     5f0:	99 f1       	breq	.+102    	; 0x658 <DIO_vInternalpullup+0x74>
     5f2:	83 34       	cpi	r24, 0x43	; 67
     5f4:	08 f0       	brcs	.+2      	; 0x5f8 <DIO_vInternalpullup+0x14>
     5f6:	4d c0       	rjmp	.+154    	; 0x692 <DIO_vInternalpullup+0xae>
     5f8:	81 34       	cpi	r24, 0x41	; 65
     5fa:	09 f0       	breq	.+2      	; 0x5fe <DIO_vInternalpullup+0x1a>
     5fc:	83 c0       	rjmp	.+262    	; 0x704 <DIO_vInternalpullup+0x120>
     5fe:	0f c0       	rjmp	.+30     	; 0x61e <DIO_vInternalpullup+0x3a>
     600:	82 36       	cpi	r24, 0x62	; 98
     602:	51 f1       	breq	.+84     	; 0x658 <DIO_vInternalpullup+0x74>
     604:	83 36       	cpi	r24, 0x63	; 99
     606:	20 f4       	brcc	.+8      	; 0x610 <DIO_vInternalpullup+0x2c>
     608:	81 36       	cpi	r24, 0x61	; 97
     60a:	09 f0       	breq	.+2      	; 0x60e <DIO_vInternalpullup+0x2a>
     60c:	7b c0       	rjmp	.+246    	; 0x704 <DIO_vInternalpullup+0x120>
     60e:	07 c0       	rjmp	.+14     	; 0x61e <DIO_vInternalpullup+0x3a>
     610:	83 36       	cpi	r24, 0x63	; 99
     612:	09 f4       	brne	.+2      	; 0x616 <DIO_vInternalpullup+0x32>
     614:	3e c0       	rjmp	.+124    	; 0x692 <DIO_vInternalpullup+0xae>
     616:	84 36       	cpi	r24, 0x64	; 100
     618:	09 f0       	breq	.+2      	; 0x61c <DIO_vInternalpullup+0x38>
     61a:	74 c0       	rjmp	.+232    	; 0x704 <DIO_vInternalpullup+0x120>
     61c:	57 c0       	rjmp	.+174    	; 0x6cc <DIO_vInternalpullup+0xe8>
	{
		case 'A':
		case 'a':
		{
			if (DIR==1)
     61e:	41 30       	cpi	r20, 0x01	; 1
     620:	69 f4       	brne	.+26     	; 0x63c <DIO_vInternalpullup+0x58>
			{
				SET_BIT(PORTA,pin);
     622:	2b b3       	in	r18, 0x1b	; 27
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	ac 01       	movw	r20, r24
     62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_vInternalpullup+0x4c>
     62c:	44 0f       	add	r20, r20
     62e:	55 1f       	adc	r21, r21
     630:	6a 95       	dec	r22
     632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_vInternalpullup+0x48>
     634:	ba 01       	movw	r22, r20
     636:	62 2b       	or	r22, r18
     638:	6b bb       	out	0x1b, r22	; 27
     63a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,pin);
     63c:	2b b3       	in	r18, 0x1b	; 27
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	ac 01       	movw	r20, r24
     644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_vInternalpullup+0x66>
     646:	44 0f       	add	r20, r20
     648:	55 1f       	adc	r21, r21
     64a:	6a 95       	dec	r22
     64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_vInternalpullup+0x62>
     64e:	ba 01       	movw	r22, r20
     650:	60 95       	com	r22
     652:	62 23       	and	r22, r18
     654:	6b bb       	out	0x1b, r22	; 27
     656:	08 95       	ret
			break;
		}
		case 'B':
		case 'b':
		{
			if (DIR==1)
     658:	41 30       	cpi	r20, 0x01	; 1
     65a:	69 f4       	brne	.+26     	; 0x676 <DIO_vInternalpullup+0x92>
			{
				SET_BIT(PORTB,pin);
     65c:	28 b3       	in	r18, 0x18	; 24
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	ac 01       	movw	r20, r24
     664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_vInternalpullup+0x86>
     666:	44 0f       	add	r20, r20
     668:	55 1f       	adc	r21, r21
     66a:	6a 95       	dec	r22
     66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_vInternalpullup+0x82>
     66e:	ba 01       	movw	r22, r20
     670:	62 2b       	or	r22, r18
     672:	68 bb       	out	0x18, r22	; 24
     674:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pin);
     676:	28 b3       	in	r18, 0x18	; 24
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	ac 01       	movw	r20, r24
     67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_vInternalpullup+0xa0>
     680:	44 0f       	add	r20, r20
     682:	55 1f       	adc	r21, r21
     684:	6a 95       	dec	r22
     686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_vInternalpullup+0x9c>
     688:	ba 01       	movw	r22, r20
     68a:	60 95       	com	r22
     68c:	62 23       	and	r22, r18
     68e:	68 bb       	out	0x18, r22	; 24
     690:	08 95       	ret
			break;
		}
		case 'C':
		case 'c':
		{
			if (DIR==1)
     692:	41 30       	cpi	r20, 0x01	; 1
     694:	69 f4       	brne	.+26     	; 0x6b0 <DIO_vInternalpullup+0xcc>
			{
				SET_BIT(PORTC,pin);
     696:	25 b3       	in	r18, 0x15	; 21
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	ac 01       	movw	r20, r24
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_vInternalpullup+0xc0>
     6a0:	44 0f       	add	r20, r20
     6a2:	55 1f       	adc	r21, r21
     6a4:	6a 95       	dec	r22
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_vInternalpullup+0xbc>
     6a8:	ba 01       	movw	r22, r20
     6aa:	62 2b       	or	r22, r18
     6ac:	65 bb       	out	0x15, r22	; 21
     6ae:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,pin);
     6b0:	25 b3       	in	r18, 0x15	; 21
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	ac 01       	movw	r20, r24
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_vInternalpullup+0xda>
     6ba:	44 0f       	add	r20, r20
     6bc:	55 1f       	adc	r21, r21
     6be:	6a 95       	dec	r22
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_vInternalpullup+0xd6>
     6c2:	ba 01       	movw	r22, r20
     6c4:	60 95       	com	r22
     6c6:	62 23       	and	r22, r18
     6c8:	65 bb       	out	0x15, r22	; 21
     6ca:	08 95       	ret
			break;
		}
		case 'D':
		case 'd':
		{
			if (DIR==1)
     6cc:	41 30       	cpi	r20, 0x01	; 1
     6ce:	69 f4       	brne	.+26     	; 0x6ea <DIO_vInternalpullup+0x106>
			{
				SET_BIT(PORTD,pin);
     6d0:	22 b3       	in	r18, 0x12	; 18
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	ac 01       	movw	r20, r24
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_vInternalpullup+0xfa>
     6da:	44 0f       	add	r20, r20
     6dc:	55 1f       	adc	r21, r21
     6de:	6a 95       	dec	r22
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_vInternalpullup+0xf6>
     6e2:	ba 01       	movw	r22, r20
     6e4:	62 2b       	or	r22, r18
     6e6:	62 bb       	out	0x12, r22	; 18
     6e8:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,pin);
     6ea:	22 b3       	in	r18, 0x12	; 18
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	ac 01       	movw	r20, r24
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_vInternalpullup+0x114>
     6f4:	44 0f       	add	r20, r20
     6f6:	55 1f       	adc	r21, r21
     6f8:	6a 95       	dec	r22
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_vInternalpullup+0x110>
     6fc:	ba 01       	movw	r22, r20
     6fe:	60 95       	com	r22
     700:	62 23       	and	r22, r18
     702:	62 bb       	out	0x12, r22	; 18
     704:	08 95       	ret

00000706 <DIO_vWrite_nibble>:
	}
}


void DIO_vWrite_nibble (unsigned char PORT,unsigned char pin,unsigned char Value)
{
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	08 2f       	mov	r16, r24
     718:	16 2f       	mov	r17, r22

	if (pin<=4)
     71a:	65 30       	cpi	r22, 0x05	; 5
     71c:	28 f5       	brcc	.+74     	; 0x768 <DIO_vWrite_nibble+0x62>
	{
		unsigned char n=0;
		unsigned char g=pin+4;
     71e:	86 2f       	mov	r24, r22
     720:	8c 5f       	subi	r24, 0xFC	; 252
		for (;pin<g;pin++,n++)
     722:	68 17       	cp	r22, r24
     724:	08 f5       	brcc	.+66     	; 0x768 <DIO_vWrite_nibble+0x62>
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	d0 e0       	ldi	r29, 0x00	; 0
		{
			DIO_vWrite_pin(PORT,pin,READ_BIT(Value,n));
     72a:	ee 24       	eor	r14, r14
     72c:	ff 24       	eor	r15, r15
     72e:	e3 94       	inc	r14
     730:	c4 2e       	mov	r12, r20
     732:	dd 24       	eor	r13, r13
		}
	}
}


void DIO_vWrite_nibble (unsigned char PORT,unsigned char pin,unsigned char Value)
     734:	6c 2f       	mov	r22, r28
     736:	61 0f       	add	r22, r17
	{
		unsigned char n=0;
		unsigned char g=pin+4;
		for (;pin<g;pin++,n++)
		{
			DIO_vWrite_pin(PORT,pin,READ_BIT(Value,n));
     738:	c7 01       	movw	r24, r14
     73a:	0c 2e       	mov	r0, r28
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_vWrite_nibble+0x3c>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	0a 94       	dec	r0
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_vWrite_nibble+0x38>
     746:	8c 21       	and	r24, r12
     748:	9d 21       	and	r25, r13
     74a:	9c 01       	movw	r18, r24
     74c:	0c 2e       	mov	r0, r28
     74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_vWrite_nibble+0x4e>
     750:	35 95       	asr	r19
     752:	27 95       	ror	r18
     754:	0a 94       	dec	r0
     756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_vWrite_nibble+0x4a>
     758:	a9 01       	movw	r20, r18
     75a:	80 2f       	mov	r24, r16
     75c:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
     760:	21 96       	adiw	r28, 0x01	; 1

	if (pin<=4)
	{
		unsigned char n=0;
		unsigned char g=pin+4;
		for (;pin<g;pin++,n++)
     762:	c4 30       	cpi	r28, 0x04	; 4
     764:	d1 05       	cpc	r29, r1
     766:	31 f7       	brne	.-52     	; 0x734 <DIO_vWrite_nibble+0x2e>
		{
			DIO_vWrite_pin(PORT,pin,READ_BIT(Value,n));
		}
	}
	
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <EEPROM_vWrite>:
#include "avr/io.h"
#include "avr/interrupt.h"
#include "Std_macros.h"
void EEPROM_vWrite (unsigned short Address, unsigned char data)
{
	EEARL=(unsigned char)Address;
     77a:	8e bb       	out	0x1e, r24	; 30
	EEARH=(unsigned char)(Address>>8);
     77c:	9f bb       	out	0x1f, r25	; 31
	EEDR=data;
     77e:	6d bb       	out	0x1d, r22	; 29
	cli();
     780:	f8 94       	cli
	SET_BIT(EECR,EEMWE); //After 4 clock cycle will return back to 0
     782:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     784:	e1 9a       	sbi	0x1c, 1	; 28
	sei(); 
     786:	78 94       	sei
	//After the end of writing in EEPROM will be back to 0 and next instruction will be executed after 2 Clock cycle
	while(READ_BIT(EECR,EEWE)==1);
     788:	e1 99       	sbic	0x1c, 1	; 28
     78a:	fe cf       	rjmp	.-4      	; 0x788 <EEPROM_vWrite+0xe>
}
     78c:	08 95       	ret

0000078e <EEPROM_uRead>:

unsigned char EEPROM_uRead (unsigned short Address)
{
	EEARL=(unsigned char)Address;
     78e:	8e bb       	out	0x1e, r24	; 30
	EEARH=(unsigned char)(Address>>8);
     790:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR,EERE);
     792:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     794:	8d b3       	in	r24, 0x1d	; 29
     796:	08 95       	ret

00000798 <Led_vInit>:
 */ 
#include "DIO.h"


void Led_vInit(volatile unsigned char PORT,volatile unsigned char pin)
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	00 d0       	rcall	.+0      	; 0x79e <Led_vInit+0x6>
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	89 83       	std	Y+1, r24	; 0x01
     7a4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vSet_pin(PORT,pin,1);
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	6a 81       	ldd	r22, Y+2	; 0x02
     7aa:	41 e0       	ldi	r20, 0x01	; 1
     7ac:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
}
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <Led_vTurnON>:

void Led_vTurnON(volatile unsigned char PORT,volatile unsigned char pin)
{
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <Led_vTurnON+0x6>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vWrite_pin(PORT,pin,1);
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	6a 81       	ldd	r22, Y+2	; 0x02
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
}
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <Led_vTurnOFF>:

void Led_vTurnOFF(volatile unsigned char PORT,volatile unsigned char pin)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <Led_vTurnOFF+0x6>
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vWrite_pin(PORT,pin,0);
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	6a 81       	ldd	r22, Y+2	; 0x02
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
}
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <Led_vTog>:

void Led_vTog(volatile unsigned char PORT,volatile unsigned char pin)
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <Led_vTog+0x6>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vTog_pin(PORT,pin);
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	6a 81       	ldd	r22, Y+2	; 0x02
     810:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_vTog_pin>
}
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <Led_uRead>:

unsigned char Led_uRead(volatile unsigned char PORT,volatile unsigned char pin)
{
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	00 d0       	rcall	.+0      	; 0x824 <Led_uRead+0x6>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	89 83       	std	Y+1, r24	; 0x01
     82a:	6a 83       	std	Y+2, r22	; 0x02
	 return DIO_uRead_pin(PORT,pin);
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	6a 81       	ldd	r22, Y+2	; 0x02
     830:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_uRead_pin>
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <main>:
unsigned char Room_3_status,Room_4_status,TV_status;
volatile unsigned short Input_Volt=0;
volatile unsigned char Actual_Temp=DUMMY,Desired_Temp=DUMMY,Turn_on_flag=0;
int main(void)
{
	Led_vInit('d',0);
     83e:	84 e6       	ldi	r24, 0x64	; 100
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	0e 94 cc 03 	call	0x798	; 0x798 <Led_vInit>
	Led_vInit('d',1);
     846:	84 e6       	ldi	r24, 0x64	; 100
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	0e 94 cc 03 	call	0x798	; 0x798 <Led_vInit>
	Led_vInit('d',2);
     84e:	84 e6       	ldi	r24, 0x64	; 100
     850:	62 e0       	ldi	r22, 0x02	; 2
     852:	0e 94 cc 03 	call	0x798	; 0x798 <Led_vInit>
	Led_vInit('d',3);
     856:	84 e6       	ldi	r24, 0x64	; 100
     858:	63 e0       	ldi	r22, 0x03	; 3
     85a:	0e 94 cc 03 	call	0x798	; 0x798 <Led_vInit>
	Led_vInit('d',4);
     85e:	84 e6       	ldi	r24, 0x64	; 100
     860:	64 e0       	ldi	r22, 0x04	; 4
     862:	0e 94 cc 03 	call	0x798	; 0x798 <Led_vInit>
	ADC_vInit();
     866:	0e 94 5d 00 	call	0xba	; 0xba <ADC_vInit>
	DC_Motor_vInit();
     86a:	0e 94 6f 00 	call	0xde	; 0xde <DC_Motor_vInit>
	SPI_Slave_vInit();
     86e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <SPI_Slave_vInit>
	Desired_Temp=EEPROM_uRead(ADDRESS_DESIRED_TEMP);
     872:	80 e2       	ldi	r24, 0x20	; 32
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 c7 03 	call	0x78e	; 0x78e <EEPROM_uRead>
     87a:	80 93 60 00 	sts	0x0060, r24
	Turn_on_flag=EEPROM_uRead(ADDRESS_TURN_ON_AC_LAST);
     87e:	81 e2       	ldi	r24, 0x21	; 33
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 c7 03 	call	0x78e	; 0x78e <EEPROM_uRead>
     886:	80 93 64 00 	sts	0x0064, r24
	Room_1_status=EEPROM_uRead(ADDRESS_ROOMS);
     88a:	82 e2       	ldi	r24, 0x22	; 34
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 c7 03 	call	0x78e	; 0x78e <EEPROM_uRead>
     892:	80 93 6a 00 	sts	0x006A, r24
	Room_2_status=EEPROM_uRead(ADDRESS_ROOMS+1);
     896:	83 e2       	ldi	r24, 0x23	; 35
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 c7 03 	call	0x78e	; 0x78e <EEPROM_uRead>
     89e:	80 93 68 00 	sts	0x0068, r24
	Room_3_status=EEPROM_uRead(ADDRESS_ROOMS+2);
     8a2:	84 e2       	ldi	r24, 0x24	; 36
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 c7 03 	call	0x78e	; 0x78e <EEPROM_uRead>
     8aa:	80 93 6b 00 	sts	0x006B, r24
	Room_4_status=EEPROM_uRead(ADDRESS_ROOMS+3);
     8ae:	85 e2       	ldi	r24, 0x25	; 37
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 c7 03 	call	0x78e	; 0x78e <EEPROM_uRead>
     8b6:	80 93 69 00 	sts	0x0069, r24
	TV_status=EEPROM_uRead(ADDRESS_TV_TURN_ON_LAST);
     8ba:	86 e2       	ldi	r24, 0x26	; 38
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 c7 03 	call	0x78e	; 0x78e <EEPROM_uRead>
     8c2:	80 93 67 00 	sts	0x0067, r24
	if (Room_1_status==1)
     8c6:	80 91 6a 00 	lds	r24, 0x006A
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	21 f4       	brne	.+8      	; 0x8d6 <__stack+0x77>
	Led_vTurnON('D',0);
     8ce:	84 e4       	ldi	r24, 0x44	; 68
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
	if (Room_2_status==1)
     8d6:	80 91 68 00 	lds	r24, 0x0068
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <__stack+0x87>
	Led_vTurnON('D',1);
     8de:	84 e4       	ldi	r24, 0x44	; 68
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
	if (Room_3_status==1)
     8e6:	80 91 6b 00 	lds	r24, 0x006B
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__stack+0x97>
	Led_vTurnON('D',2);
     8ee:	84 e4       	ldi	r24, 0x44	; 68
     8f0:	62 e0       	ldi	r22, 0x02	; 2
     8f2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
	if (Room_4_status==1)
     8f6:	80 91 69 00 	lds	r24, 0x0069
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	21 f4       	brne	.+8      	; 0x906 <__stack+0xa7>
	Led_vTurnON('D',3);
     8fe:	84 e4       	ldi	r24, 0x44	; 68
     900:	63 e0       	ldi	r22, 0x03	; 3
     902:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
	if (TV_status==1)
     906:	80 91 67 00 	lds	r24, 0x0067
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	21 f4       	brne	.+8      	; 0x916 <__stack+0xb7>
	Led_vTurnON('D',4);
     90e:	84 e4       	ldi	r24, 0x44	; 68
     910:	64 e0       	ldi	r22, 0x04	; 4
     912:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
	Timer1_CTC_OCR1A();
     916:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Timer1_CTC_OCR1A>
			break;
			case AC_STATUS:
			SPI_Slave_uRecieve(Turn_on_flag);
			break;
			case AC_TURN_ON:
			Turn_on_flag=1;
     91a:	c1 e0       	ldi	r28, 0x01	; 1
	if (TV_status==1)
	Led_vTurnON('D',4);
	Timer1_CTC_OCR1A();
    while(1)
    {
		Command=SPI_Slave_uRecieve(DUMMY);
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
     922:	80 93 62 00 	sts	0x0062, r24
		switch (Command)
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	84 31       	cpi	r24, 0x14	; 20
     92c:	91 05       	cpc	r25, r1
     92e:	b0 f7       	brcc	.-20     	; 0x91c <__stack+0xbd>
     930:	86 5d       	subi	r24, 0xD6	; 214
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	fc 01       	movw	r30, r24
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	05 90       	lpm	r0, Z+
     93c:	f4 91       	lpm	r31, Z
     93e:	e0 2d       	mov	r30, r0
     940:	09 94       	ijmp
		{
			case ROOM_ONE_STATUS:
			SPI_Slave_uRecieve(Led_uRead('d',0));
     942:	84 e6       	ldi	r24, 0x64	; 100
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     94a:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
			break;
     94e:	e6 cf       	rjmp	.-52     	; 0x91c <__stack+0xbd>
			case ROOM_ONE_LIGHT_TURN_ON:
			Led_vTurnON('D',0);
     950:	84 e4       	ldi	r24, 0x44	; 68
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
			EEPROM_vWrite(ADDRESS_ROOMS,Led_uRead('d',0));
     958:	84 e6       	ldi	r24, 0x64	; 100
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     960:	68 2f       	mov	r22, r24
     962:	82 e2       	ldi	r24, 0x22	; 34
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     96a:	d8 cf       	rjmp	.-80     	; 0x91c <__stack+0xbd>
			case ROOM_ONE_LIGHT_TURN_OFF:
			Led_vTurnOFF('d',0);
     96c:	84 e6       	ldi	r24, 0x64	; 100
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Led_vTurnOFF>
			EEPROM_vWrite(ADDRESS_ROOMS,Led_uRead('d',0));
     974:	84 e6       	ldi	r24, 0x64	; 100
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     97c:	68 2f       	mov	r22, r24
     97e:	82 e2       	ldi	r24, 0x22	; 34
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     986:	ca cf       	rjmp	.-108    	; 0x91c <__stack+0xbd>
			case ROOM_TWO_STATUS:
			SPI_Slave_uRecieve(Led_uRead('d',1));
     988:	84 e6       	ldi	r24, 0x64	; 100
     98a:	6c 2f       	mov	r22, r28
     98c:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     990:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
			break;
     994:	c3 cf       	rjmp	.-122    	; 0x91c <__stack+0xbd>
			case ROOM_TWO_LIGHT_TURN_ON:
			Led_vTurnON('D',1);
     996:	84 e4       	ldi	r24, 0x44	; 68
     998:	6c 2f       	mov	r22, r28
     99a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
			EEPROM_vWrite(ADDRESS_ROOMS+1,Led_uRead('d',1));
     99e:	84 e6       	ldi	r24, 0x64	; 100
     9a0:	6c 2f       	mov	r22, r28
     9a2:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     9a6:	68 2f       	mov	r22, r24
     9a8:	83 e2       	ldi	r24, 0x23	; 35
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     9b0:	b5 cf       	rjmp	.-150    	; 0x91c <__stack+0xbd>
			case ROOM_TWO_LIGHT_TURN_OFF:
			Led_vTurnOFF('d',1);
     9b2:	84 e6       	ldi	r24, 0x64	; 100
     9b4:	6c 2f       	mov	r22, r28
     9b6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Led_vTurnOFF>
			EEPROM_vWrite(ADDRESS_ROOMS+1,Led_uRead('d',1));
     9ba:	84 e6       	ldi	r24, 0x64	; 100
     9bc:	6c 2f       	mov	r22, r28
     9be:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     9c2:	68 2f       	mov	r22, r24
     9c4:	83 e2       	ldi	r24, 0x23	; 35
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     9cc:	a7 cf       	rjmp	.-178    	; 0x91c <__stack+0xbd>
			case ROOM_THREE_STATUS:
			SPI_Slave_uRecieve(Led_uRead('d',2));
     9ce:	84 e6       	ldi	r24, 0x64	; 100
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     9d6:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
			break;
     9da:	a0 cf       	rjmp	.-192    	; 0x91c <__stack+0xbd>
			case ROOM_THREE_LIGHT_TURN_ON:
			Led_vTurnON('D',2);
     9dc:	84 e4       	ldi	r24, 0x44	; 68
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
			EEPROM_vWrite(ADDRESS_ROOMS+2,Led_uRead('d',2));
     9e4:	84 e6       	ldi	r24, 0x64	; 100
     9e6:	62 e0       	ldi	r22, 0x02	; 2
     9e8:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     9ec:	68 2f       	mov	r22, r24
     9ee:	84 e2       	ldi	r24, 0x24	; 36
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     9f6:	92 cf       	rjmp	.-220    	; 0x91c <__stack+0xbd>
			case ROOM_THREE_LIGHT_TURN_OFF:
			Led_vTurnOFF('d',2);
     9f8:	84 e6       	ldi	r24, 0x64	; 100
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Led_vTurnOFF>
			EEPROM_vWrite(ADDRESS_ROOMS+2,Led_uRead('d',2));
     a00:	84 e6       	ldi	r24, 0x64	; 100
     a02:	62 e0       	ldi	r22, 0x02	; 2
     a04:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     a08:	68 2f       	mov	r22, r24
     a0a:	84 e2       	ldi	r24, 0x24	; 36
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     a12:	84 cf       	rjmp	.-248    	; 0x91c <__stack+0xbd>
			case ROOM_FOUR_STATUS:
			SPI_Slave_uRecieve(Led_uRead('d',3));
     a14:	84 e6       	ldi	r24, 0x64	; 100
     a16:	63 e0       	ldi	r22, 0x03	; 3
     a18:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     a1c:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
			break;
     a20:	7d cf       	rjmp	.-262    	; 0x91c <__stack+0xbd>
			case ROOM_FOUR_LIGHT_TURN_ON:
			Led_vTurnON('D',3);
     a22:	84 e4       	ldi	r24, 0x44	; 68
     a24:	63 e0       	ldi	r22, 0x03	; 3
     a26:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
			EEPROM_vWrite(ADDRESS_ROOMS+3,Led_uRead('d',3));
     a2a:	84 e6       	ldi	r24, 0x64	; 100
     a2c:	63 e0       	ldi	r22, 0x03	; 3
     a2e:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     a32:	68 2f       	mov	r22, r24
     a34:	85 e2       	ldi	r24, 0x25	; 37
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     a3c:	6f cf       	rjmp	.-290    	; 0x91c <__stack+0xbd>
			case ROOM_FOUR_LIGHT_TURN_OFF:
			Led_vTurnOFF('d',3);
     a3e:	84 e6       	ldi	r24, 0x64	; 100
     a40:	63 e0       	ldi	r22, 0x03	; 3
     a42:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Led_vTurnOFF>
			EEPROM_vWrite(ADDRESS_ROOMS+3,Led_uRead('d',3));
     a46:	84 e6       	ldi	r24, 0x64	; 100
     a48:	63 e0       	ldi	r22, 0x03	; 3
     a4a:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     a4e:	68 2f       	mov	r22, r24
     a50:	85 e2       	ldi	r24, 0x25	; 37
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     a58:	61 cf       	rjmp	.-318    	; 0x91c <__stack+0xbd>
			case TV_STATUS:
			SPI_Slave_uRecieve(Led_uRead('d',4));
     a5a:	84 e6       	ldi	r24, 0x64	; 100
     a5c:	64 e0       	ldi	r22, 0x04	; 4
     a5e:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     a62:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
			break;
     a66:	5a cf       	rjmp	.-332    	; 0x91c <__stack+0xbd>
			case TV_TURN_ON:
			Led_vTurnON('D',4);
     a68:	84 e4       	ldi	r24, 0x44	; 68
     a6a:	64 e0       	ldi	r22, 0x04	; 4
     a6c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_vTurnON>
			EEPROM_vWrite(ADDRESS_TV_TURN_ON_LAST,Led_uRead('d',4));
     a70:	84 e6       	ldi	r24, 0x64	; 100
     a72:	64 e0       	ldi	r22, 0x04	; 4
     a74:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     a78:	68 2f       	mov	r22, r24
     a7a:	86 e2       	ldi	r24, 0x26	; 38
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     a82:	4c cf       	rjmp	.-360    	; 0x91c <__stack+0xbd>
			case TV_TURN_OFF:
			Led_vTurnOFF('d',4);
     a84:	84 e6       	ldi	r24, 0x64	; 100
     a86:	64 e0       	ldi	r22, 0x04	; 4
     a88:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Led_vTurnOFF>
			EEPROM_vWrite(ADDRESS_TV_TURN_ON_LAST,Led_uRead('d',4));
     a8c:	84 e6       	ldi	r24, 0x64	; 100
     a8e:	64 e0       	ldi	r22, 0x04	; 4
     a90:	0e 94 0f 04 	call	0x81e	; 0x81e <Led_uRead>
     a94:	68 2f       	mov	r22, r24
     a96:	86 e2       	ldi	r24, 0x26	; 38
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     a9e:	3e cf       	rjmp	.-388    	; 0x91c <__stack+0xbd>
			case AC_STATUS:
			SPI_Slave_uRecieve(Turn_on_flag);
     aa0:	80 91 64 00 	lds	r24, 0x0064
     aa4:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
			break;
     aa8:	39 cf       	rjmp	.-398    	; 0x91c <__stack+0xbd>
			case AC_TURN_ON:
			Turn_on_flag=1;
     aaa:	c0 93 64 00 	sts	0x0064, r28
			EEPROM_vWrite(ADDRESS_TURN_ON_AC_LAST,Turn_on_flag);
     aae:	60 91 64 00 	lds	r22, 0x0064
     ab2:	81 e2       	ldi	r24, 0x21	; 33
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     aba:	30 cf       	rjmp	.-416    	; 0x91c <__stack+0xbd>
			case AC_TURN_OFF:
			Turn_on_flag=0;
     abc:	10 92 64 00 	sts	0x0064, r1
			EEPROM_vWrite(ADDRESS_TURN_ON_AC_LAST,Turn_on_flag);
     ac0:	60 91 64 00 	lds	r22, 0x0064
     ac4:	81 e2       	ldi	r24, 0x21	; 33
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;
     acc:	27 cf       	rjmp	.-434    	; 0x91c <__stack+0xbd>
			case AC_TEMP_CONTROL:
			Desired_Temp=SPI_Slave_uRecieve(DUMMY);
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	0e 94 06 06 	call	0xc0c	; 0xc0c <SPI_Slave_uRecieve>
     ad4:	80 93 60 00 	sts	0x0060, r24
			EEPROM_vWrite(ADDRESS_DESIRED_TEMP,Desired_Temp);
     ad8:	60 91 60 00 	lds	r22, 0x0060
     adc:	80 e2       	ldi	r24, 0x20	; 32
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 bd 03 	call	0x77a	; 0x77a <EEPROM_vWrite>
			break;	
     ae4:	1b cf       	rjmp	.-458    	; 0x91c <__stack+0xbd>

00000ae6 <__vector_7>:
		}		
    }
}

ISR(TIMER1_COMPA_vect)
{
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
	Input_Volt=(double)((2.56*1000)/1024)*ADC_uRead();
     b08:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_uRead>
     b0c:	bc 01       	movw	r22, r24
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 96 07 	call	0xf2c	; 0xf2c <__floatunsisf>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e2       	ldi	r20, 0x20	; 32
     b1c:	50 e4       	ldi	r21, 0x40	; 64
     b1e:	0e 94 4c 08 	call	0x1098	; 0x1098 <__mulsf3>
     b22:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fixunssfsi>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	90 93 66 00 	sts	0x0066, r25
     b2e:	80 93 65 00 	sts	0x0065, r24
	Actual_Temp=Input_Volt/10;
     b32:	80 91 65 00 	lds	r24, 0x0065
     b36:	90 91 66 00 	lds	r25, 0x0066
     b3a:	6a e0       	ldi	r22, 0x0A	; 10
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodhi4>
     b42:	60 93 61 00 	sts	0x0061, r22
	if(Actual_Temp>Desired_Temp && Turn_on_flag==1)
     b46:	90 91 61 00 	lds	r25, 0x0061
     b4a:	80 91 60 00 	lds	r24, 0x0060
     b4e:	89 17       	cp	r24, r25
     b50:	50 f4       	brcc	.+20     	; 0xb66 <__vector_7+0x80>
     b52:	80 91 64 00 	lds	r24, 0x0064
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	31 f4       	brne	.+12     	; 0xb66 <__vector_7+0x80>
	{
		DC_Motor_AC_vTurn_on_Anticlockwise();
     b5a:	0e 94 7f 00 	call	0xfe	; 0xfe <DC_Motor_AC_vTurn_on_Anticlockwise>
		DC_Motor_AC_vSpeed_control(100);
     b5e:	84 e6       	ldi	r24, 0x64	; 100
     b60:	0e 94 7c 00 	call	0xf8	; 0xf8 <DC_Motor_AC_vSpeed_control>
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <__vector_7+0x84>
	}
	else
	{
		DC_Motor_AC_vTurn_off();
     b66:	0e 94 8a 00 	call	0x114	; 0x114 <DC_Motor_AC_vTurn_off>
	}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <SPI_Master_vInit>:
#include "SPI_Driver.h"

void SPI_Master_vInit (void)
{
	//SET PINS OF MOSI AND MISO AND SCK AND SS AS OUTPUT PINS AND INPUT PINS
	DIO_vSet_pin('B',4,1);
     b8c:	82 e4       	ldi	r24, 0x42	; 66
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	DIO_vSet_pin('B',5,1);
     b96:	82 e4       	ldi	r24, 0x42	; 66
     b98:	65 e0       	ldi	r22, 0x05	; 5
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	DIO_vSet_pin('B',6,0);
     ba0:	82 e4       	ldi	r24, 0x42	; 66
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	DIO_vSet_pin('B',7,1);
     baa:	82 e4       	ldi	r24, 0x42	; 66
     bac:	67 e0       	ldi	r22, 0x07	; 7
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	//SET THIS MC AS MASTER
	SET_BIT(SPCR,MSTR);
     bb4:	6c 9a       	sbi	0x0d, 4	; 13
	//SET Frequency of SPI clock of master controller by /16
	SET_BIT(SPCR,SPR0);
     bb6:	68 9a       	sbi	0x0d, 0	; 13
	//ENABLE SPI MODE
	SET_BIT(SPCR,SPE);
     bb8:	6e 9a       	sbi	0x0d, 6	; 13
	/*enable interrupt
	sei();
	SET_BIT(SPCR,SPIE);*/
	//SET SS PIN AS ACTIVE HIGH
	DIO_vWrite_pin('B',4,1);
     bba:	82 e4       	ldi	r24, 0x42	; 66
     bbc:	64 e0       	ldi	r22, 0x04	; 4
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
}
     bc4:	08 95       	ret

00000bc6 <SPI_Slave_vInit>:

void SPI_Slave_vInit (void)
{
	//SET PINS OF MOSI AND MISO AND SCK AND SS AS OUTPUT PINS AND INPUT PINS
	DIO_vSet_pin('B',4,0);
     bc6:	82 e4       	ldi	r24, 0x42	; 66
     bc8:	64 e0       	ldi	r22, 0x04	; 4
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	DIO_vSet_pin('B',5,0);
     bd0:	82 e4       	ldi	r24, 0x42	; 66
     bd2:	65 e0       	ldi	r22, 0x05	; 5
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	DIO_vSet_pin('B',6,1);
     bda:	82 e4       	ldi	r24, 0x42	; 66
     bdc:	66 e0       	ldi	r22, 0x06	; 6
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	DIO_vSet_pin('B',7,0);
     be4:	82 e4       	ldi	r24, 0x42	; 66
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 98 00 	call	0x130	; 0x130 <DIO_vSet_pin>
	//ENABLE SPI MODE
	SET_BIT(SPCR,SPE);
     bee:	6e 9a       	sbi	0x0d, 6	; 13
	/*//enable interrupt
	sei();
	SET_BIT(SPCR,SPIE);*/
}
     bf0:	08 95       	ret

00000bf2 <SPI_Master_uTransmit>:

unsigned char SPI_Master_uTransmit (unsigned char Data)
{
     bf2:	cf 93       	push	r28
     bf4:	c8 2f       	mov	r28, r24
	//set ss pin as active low 
	DIO_vWrite_pin('B',4,0);
     bf6:	82 e4       	ldi	r24, 0x42	; 66
     bf8:	64 e0       	ldi	r22, 0x04	; 4
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	0e 94 29 01 	call	0x252	; 0x252 <DIO_vWrite_pin>
	//write data in data register of SPI
	SPDR=Data;
     c00:	cf b9       	out	0x0f, r28	; 15
	//ensure that flag is one this line need to be cancelled while using interrupt
	while (READ_BIT(SPSR,SPIF)==0);
     c02:	77 9b       	sbis	0x0e, 7	; 14
     c04:	fe cf       	rjmp	.-4      	; 0xc02 <SPI_Master_uTransmit+0x10>
	//RETURN DATA OF DATA REGISTER AFTER DATA EXCHANGE
	return SPDR;
     c06:	8f b1       	in	r24, 0x0f	; 15
}
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <SPI_Slave_uRecieve>:

unsigned char SPI_Slave_uRecieve (unsigned char Data)
{
	//write data in data register of SPI
	SPDR=Data;
     c0c:	8f b9       	out	0x0f, r24	; 15
	//ensure that flag is one this line need to be cancelled while using interrupt
	while (READ_BIT(SPSR,SPIF)==0);
     c0e:	77 9b       	sbis	0x0e, 7	; 14
     c10:	fe cf       	rjmp	.-4      	; 0xc0e <SPI_Slave_uRecieve+0x2>
	//RETURN DATA OF DATA REGISTER AFTER DATA EXCHANGE
	return SPDR;
     c12:	8f b1       	in	r24, 0x0f	; 15
}
     c14:	08 95       	ret

00000c16 <SPT_Master_vSend_String>:

void SPT_Master_vSend_String (const char *Data)
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
	while(*Data!=0)
     c1c:	88 81       	ld	r24, Y
     c1e:	88 23       	and	r24, r24
     c20:	79 f0       	breq	.+30     	; 0xc40 <SPT_Master_vSend_String+0x2a>
	while (READ_BIT(SPSR,SPIF)==0);
	//RETURN DATA OF DATA REGISTER AFTER DATA EXCHANGE
	return SPDR;
}

void SPT_Master_vSend_String (const char *Data)
     c22:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Data!=0)
	{
		SPI_Master_uTransmit(*Data);
     c24:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <SPI_Master_uTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	92 e5       	ldi	r25, 0x52	; 82
     c2c:	a7 e0       	ldi	r26, 0x07	; 7
     c2e:	81 50       	subi	r24, 0x01	; 1
     c30:	90 40       	sbci	r25, 0x00	; 0
     c32:	a0 40       	sbci	r26, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <SPT_Master_vSend_String+0x18>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <SPT_Master_vSend_String+0x22>
     c38:	00 00       	nop
	return SPDR;
}

void SPT_Master_vSend_String (const char *Data)
{
	while(*Data!=0)
     c3a:	89 91       	ld	r24, Y+
     c3c:	88 23       	and	r24, r24
     c3e:	91 f7       	brne	.-28     	; 0xc24 <SPT_Master_vSend_String+0xe>
	{
		SPI_Master_uTransmit(*Data);
		_delay_ms(300);
		Data++;
	}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <Timer0_CTC_vInit>:
#include "Std_macros.h"
#include "avr/io.h"

void Timer0_CTC_vInit(void)
{
	SET_BIT(TCCR0,CS02);
     c46:	83 b7       	in	r24, 0x33	; 51
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);//SET CLOCK CYCLE WITH PRESCALER 1024
     c4c:	83 b7       	in	r24, 0x33	; 51
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);//SET TIMER MODE WITH CTC CLEAR TIME REGISTER (TCNT0) WITH COMPARE MATCH
     c52:	83 b7       	in	r24, 0x33	; 51
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	83 bf       	out	0x33, r24	; 51
	OCR0=78;
     c58:	8e e4       	ldi	r24, 0x4E	; 78
     c5a:	8c bf       	out	0x3c, r24	; 60
	sei();
     c5c:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);//SET ENABLE INTERUPT OF CTC CLEAR TIME REGISTER (TCNT0) WITH COMPARE MATCH
     c5e:	89 b7       	in	r24, 0x39	; 57
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	89 bf       	out	0x39, r24	; 57
}
     c64:	08 95       	ret

00000c66 <Timer0_waveform_non_PWM_vInit>:

void Timer0_waveform_non_PWM_vInit(void)
{
	SET_BIT(DDRB,3);//to set OC0 as Output
     c66:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,CS02);
     c68:	83 b7       	in	r24, 0x33	; 51
     c6a:	84 60       	ori	r24, 0x04	; 4
     c6c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);//SET CLOCK CYCLE WITH PRESCALER 1024  frq=freq of mc/(2*(1+ocr0)*prescaler
     c6e:	83 b7       	in	r24, 0x33	; 51
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	83 bf       	out	0x33, r24	; 51
	OCR0=69;
     c74:	85 e4       	ldi	r24, 0x45	; 69
     c76:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,WGM01);//SET TIMER MODE WITH CTC CLEAR TIME REGISTER (TCNT0) WITH COMPARE MATCH
     c78:	83 b7       	in	r24, 0x33	; 51
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);//SET OC0 BY TOGGLE 
     c7e:	83 b7       	in	r24, 0x33	; 51
     c80:	80 61       	ori	r24, 0x10	; 16
     c82:	83 bf       	out	0x33, r24	; 51
}
     c84:	08 95       	ret

00000c86 <Timer0_v_FastPWM>:

void Timer0_v_FastPWM(void)
{
	SET_BIT(DDRB,3);//to set OC0 as Output
     c86:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,CS02);
     c88:	83 b7       	in	r24, 0x33	; 51
     c8a:	84 60       	ori	r24, 0x04	; 4
     c8c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);//SET CLOCK CYCLE WITH PRESCALER 1024  frq=freq of mc/(2*(1+ocr0)*prescaler
     c8e:	83 b7       	in	r24, 0x33	; 51
     c90:	81 60       	ori	r24, 0x01	; 1
     c92:	83 bf       	out	0x33, r24	; 51
	//OCR0=64;
	SET_BIT(TCCR0,WGM00);
     c94:	83 b7       	in	r24, 0x33	; 51
     c96:	80 64       	ori	r24, 0x40	; 64
     c98:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);//SET TIMER MODE WITH FAST PWM
     c9a:	83 b7       	in	r24, 0x33	; 51
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);//10 means non inverting mode clear on OCR0 set on overflow 
     ca0:	83 b7       	in	r24, 0x33	; 51
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	83 bf       	out	0x33, r24	; 51
	//SET_BIT(TCCR0,COM00);//11 means inverting mode set on OCR0 and clear on overflow
}
     ca6:	08 95       	ret

00000ca8 <Timer0_v_Phase_Control_PWM>:

void Timer0_v_Phase_Control_PWM(void)
{
	SET_BIT(DDRB,3);//to set OC0 as Output
     ca8:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,CS02);
     caa:	83 b7       	in	r24, 0x33	; 51
     cac:	84 60       	ori	r24, 0x04	; 4
     cae:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);//SET CLOCK CYCLE WITH PRESCALER 1024  frq=freq of mc/(2*(1+ocr0)*prescaler
     cb0:	83 b7       	in	r24, 0x33	; 51
     cb2:	81 60       	ori	r24, 0x01	; 1
     cb4:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,WGM00);//SET TIMER MODE WITH phase control PWM
     cba:	83 b7       	in	r24, 0x33	; 51
     cbc:	80 64       	ori	r24, 0x40	; 64
     cbe:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);//10 means from OCR0 to 0 to OCR0 on mode
     cc0:	83 b7       	in	r24, 0x33	; 51
     cc2:	80 62       	ori	r24, 0x20	; 32
     cc4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);//11 means from OCR0 to 255 to OCR0 on mode
     cc6:	83 b7       	in	r24, 0x33	; 51
     cc8:	80 61       	ori	r24, 0x10	; 16
     cca:	83 bf       	out	0x33, r24	; 51
	
}
     ccc:	08 95       	ret

00000cce <Timer0_v_FastPWM_duty_cycle>:

void Timer0_v_FastPWM_duty_cycle(unsigned char duty_cycle)
{
	OCR0=((unsigned long)duty_cycle*255/100);
     cce:	68 2f       	mov	r22, r24
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 af 08 	call	0x115e	; 0x115e <__mulsi3>
     ce2:	24 e6       	ldi	r18, 0x64	; 100
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__udivmodsi4>
     cee:	2c bf       	out	0x3c, r18	; 60
     cf0:	08 95       	ret

00000cf2 <Timer1_CTC_OCR1A>:
#include "Std_macros.h"
#include "avr/interrupt.h"

void Timer1_CTC_OCR1A (void)
{
	SET_BIT(TCCR1B,CS12);
     cf2:	8e b5       	in	r24, 0x2e	; 46
     cf4:	84 60       	ori	r24, 0x04	; 4
     cf6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS10);//TO SET PRE SCALER BY 1024
     cf8:	8e b5       	in	r24, 0x2e	; 46
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM12);//TO SET CTC OCR1A
     cfe:	8e b5       	in	r24, 0x2e	; 46
     d00:	88 60       	ori	r24, 0x08	; 8
     d02:	8e bd       	out	0x2e, r24	; 46
	OCR1A=700;
     d04:	8c eb       	ldi	r24, 0xBC	; 188
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	9b bd       	out	0x2b, r25	; 43
     d0a:	8a bd       	out	0x2a, r24	; 42
	SET_BIT(TIMSK,OCIE1A);
     d0c:	89 b7       	in	r24, 0x39	; 57
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	89 bf       	out	0x39, r24	; 57
	sei();
     d12:	78 94       	sei
}
     d14:	08 95       	ret

00000d16 <Timer1_FAST_PWM_ICR>:

void Timer1_FAST_PWM_ICR (double degree)
{
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
	double value;
	value=(double)1+0.0055556*degree;
     d26:	20 ec       	ldi	r18, 0xC0	; 192
     d28:	3b e0       	ldi	r19, 0x0B	; 11
     d2a:	46 eb       	ldi	r20, 0xB6	; 182
     d2c:	5b e3       	ldi	r21, 0x3B	; 59
     d2e:	0e 94 4c 08 	call	0x1098	; 0x1098 <__mulsf3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e8       	ldi	r20, 0x80	; 128
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 02 07 	call	0xe04	; 0xe04 <__addsf3>
     d3e:	d8 2f       	mov	r29, r24
     d40:	c9 2f       	mov	r28, r25
     d42:	06 2f       	mov	r16, r22
     d44:	17 2f       	mov	r17, r23
     d46:	d8 2e       	mov	r13, r24
     d48:	c9 2e       	mov	r12, r25
	if (value<=1)
     d4a:	86 2f       	mov	r24, r22
     d4c:	91 2f       	mov	r25, r17
     d4e:	ad 2f       	mov	r26, r29
     d50:	bc 2f       	mov	r27, r28
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	0e 94 66 07 	call	0xecc	; 0xecc <__cmpsf2>
     d62:	18 16       	cp	r1, r24
     d64:	ac f4       	brge	.+42     	; 0xd90 <Timer1_FAST_PWM_ICR+0x7a>
	{
		value=1;
	}
	else if (value>=2)
     d66:	80 2f       	mov	r24, r16
     d68:	91 2f       	mov	r25, r17
     d6a:	ad 2f       	mov	r26, r29
     d6c:	bc 2f       	mov	r27, r28
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	50 e4       	ldi	r21, 0x40	; 64
     d7a:	0e 94 48 08 	call	0x1090	; 0x1090 <__gesf2>
     d7e:	88 23       	and	r24, r24
     d80:	8c f0       	brlt	.+34     	; 0xda4 <Timer1_FAST_PWM_ICR+0x8e>
	{
		value=2;
     d82:	00 e0       	ldi	r16, 0x00	; 0
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	dd 24       	eor	r13, r13
     d88:	cc 24       	eor	r12, r12
     d8a:	68 94       	set
     d8c:	c6 f8       	bld	r12, 6
     d8e:	0a c0       	rjmp	.+20     	; 0xda4 <Timer1_FAST_PWM_ICR+0x8e>
{
	double value;
	value=(double)1+0.0055556*degree;
	if (value<=1)
	{
		value=1;
     d90:	00 e0       	ldi	r16, 0x00	; 0
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	0f 2e       	mov	r0, r31
     d96:	f0 e8       	ldi	r31, 0x80	; 128
     d98:	df 2e       	mov	r13, r31
     d9a:	f0 2d       	mov	r31, r0
     d9c:	0f 2e       	mov	r0, r31
     d9e:	ff e3       	ldi	r31, 0x3F	; 63
     da0:	cf 2e       	mov	r12, r31
     da2:	f0 2d       	mov	r31, r0
	}
	else
	{
		value=value;
	}
	SET_BIT(DDRD,5); //SET OC1A AS OUTPUT PIN
     da4:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(TCCR1A,WGM11);
     da6:	8f b5       	in	r24, 0x2f	; 47
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
     dac:	8e b5       	in	r24, 0x2e	; 46
     dae:	88 60       	ori	r24, 0x08	; 8
     db0:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13); //SET MODE FAST PWM ICR1
     db2:	8e b5       	in	r24, 0x2e	; 46
     db4:	80 61       	ori	r24, 0x10	; 16
     db6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS10); //SET PRESCALER BY 1S
     db8:	8e b5       	in	r24, 0x2e	; 46
     dba:	81 60       	ori	r24, 0x01	; 1
     dbc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1A1);//SET OC1A NON INVERTING MODE
     dbe:	8f b5       	in	r24, 0x2f	; 47
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	8f bd       	out	0x2f, r24	; 47
	ICR1=19999;
     dc4:	8f e1       	ldi	r24, 0x1F	; 31
     dc6:	9e e4       	ldi	r25, 0x4E	; 78
     dc8:	97 bd       	out	0x27, r25	; 39
     dca:	86 bd       	out	0x26, r24	; 38
	OCR1A=value*1000;
     dcc:	80 2f       	mov	r24, r16
     dce:	91 2f       	mov	r25, r17
     dd0:	ad 2d       	mov	r26, r13
     dd2:	bc 2d       	mov	r27, r12
     dd4:	bc 01       	movw	r22, r24
     dd6:	cd 01       	movw	r24, r26
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4a e7       	ldi	r20, 0x7A	; 122
     dde:	54 e4       	ldi	r21, 0x44	; 68
     de0:	0e 94 4c 08 	call	0x1098	; 0x1098 <__mulsf3>
     de4:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	9b bd       	out	0x2b, r25	; 43
     dee:	8a bd       	out	0x2a, r24	; 42
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	08 95       	ret

00000e02 <__subsf3>:
     e02:	50 58       	subi	r21, 0x80	; 128

00000e04 <__addsf3>:
     e04:	bb 27       	eor	r27, r27
     e06:	aa 27       	eor	r26, r26
     e08:	0e d0       	rcall	.+28     	; 0xe26 <__addsf3x>
     e0a:	08 c1       	rjmp	.+528    	; 0x101c <__fp_round>
     e0c:	f9 d0       	rcall	.+498    	; 0x1000 <__fp_pscA>
     e0e:	30 f0       	brcs	.+12     	; 0xe1c <__addsf3+0x18>
     e10:	fe d0       	rcall	.+508    	; 0x100e <__fp_pscB>
     e12:	20 f0       	brcs	.+8      	; 0xe1c <__addsf3+0x18>
     e14:	31 f4       	brne	.+12     	; 0xe22 <__addsf3+0x1e>
     e16:	9f 3f       	cpi	r25, 0xFF	; 255
     e18:	11 f4       	brne	.+4      	; 0xe1e <__addsf3+0x1a>
     e1a:	1e f4       	brtc	.+6      	; 0xe22 <__addsf3+0x1e>
     e1c:	ee c0       	rjmp	.+476    	; 0xffa <__fp_nan>
     e1e:	0e f4       	brtc	.+2      	; 0xe22 <__addsf3+0x1e>
     e20:	e0 95       	com	r30
     e22:	e7 fb       	bst	r30, 7
     e24:	e4 c0       	rjmp	.+456    	; 0xfee <__fp_inf>

00000e26 <__addsf3x>:
     e26:	e9 2f       	mov	r30, r25
     e28:	0a d1       	rcall	.+532    	; 0x103e <__fp_split3>
     e2a:	80 f3       	brcs	.-32     	; 0xe0c <__addsf3+0x8>
     e2c:	ba 17       	cp	r27, r26
     e2e:	62 07       	cpc	r22, r18
     e30:	73 07       	cpc	r23, r19
     e32:	84 07       	cpc	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	18 f0       	brcs	.+6      	; 0xe3e <__addsf3x+0x18>
     e38:	71 f4       	brne	.+28     	; 0xe56 <__addsf3x+0x30>
     e3a:	9e f5       	brtc	.+102    	; 0xea2 <__addsf3x+0x7c>
     e3c:	22 c1       	rjmp	.+580    	; 0x1082 <__fp_zero>
     e3e:	0e f4       	brtc	.+2      	; 0xe42 <__addsf3x+0x1c>
     e40:	e0 95       	com	r30
     e42:	0b 2e       	mov	r0, r27
     e44:	ba 2f       	mov	r27, r26
     e46:	a0 2d       	mov	r26, r0
     e48:	0b 01       	movw	r0, r22
     e4a:	b9 01       	movw	r22, r18
     e4c:	90 01       	movw	r18, r0
     e4e:	0c 01       	movw	r0, r24
     e50:	ca 01       	movw	r24, r20
     e52:	a0 01       	movw	r20, r0
     e54:	11 24       	eor	r1, r1
     e56:	ff 27       	eor	r31, r31
     e58:	59 1b       	sub	r21, r25
     e5a:	99 f0       	breq	.+38     	; 0xe82 <__addsf3x+0x5c>
     e5c:	59 3f       	cpi	r21, 0xF9	; 249
     e5e:	50 f4       	brcc	.+20     	; 0xe74 <__addsf3x+0x4e>
     e60:	50 3e       	cpi	r21, 0xE0	; 224
     e62:	68 f1       	brcs	.+90     	; 0xebe <__addsf3x+0x98>
     e64:	1a 16       	cp	r1, r26
     e66:	f0 40       	sbci	r31, 0x00	; 0
     e68:	a2 2f       	mov	r26, r18
     e6a:	23 2f       	mov	r18, r19
     e6c:	34 2f       	mov	r19, r20
     e6e:	44 27       	eor	r20, r20
     e70:	58 5f       	subi	r21, 0xF8	; 248
     e72:	f3 cf       	rjmp	.-26     	; 0xe5a <__addsf3x+0x34>
     e74:	46 95       	lsr	r20
     e76:	37 95       	ror	r19
     e78:	27 95       	ror	r18
     e7a:	a7 95       	ror	r26
     e7c:	f0 40       	sbci	r31, 0x00	; 0
     e7e:	53 95       	inc	r21
     e80:	c9 f7       	brne	.-14     	; 0xe74 <__addsf3x+0x4e>
     e82:	7e f4       	brtc	.+30     	; 0xea2 <__addsf3x+0x7c>
     e84:	1f 16       	cp	r1, r31
     e86:	ba 0b       	sbc	r27, r26
     e88:	62 0b       	sbc	r22, r18
     e8a:	73 0b       	sbc	r23, r19
     e8c:	84 0b       	sbc	r24, r20
     e8e:	ba f0       	brmi	.+46     	; 0xebe <__addsf3x+0x98>
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	a1 f0       	breq	.+40     	; 0xebc <__addsf3x+0x96>
     e94:	ff 0f       	add	r31, r31
     e96:	bb 1f       	adc	r27, r27
     e98:	66 1f       	adc	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	c2 f7       	brpl	.-16     	; 0xe90 <__addsf3x+0x6a>
     ea0:	0e c0       	rjmp	.+28     	; 0xebe <__addsf3x+0x98>
     ea2:	ba 0f       	add	r27, r26
     ea4:	62 1f       	adc	r22, r18
     ea6:	73 1f       	adc	r23, r19
     ea8:	84 1f       	adc	r24, r20
     eaa:	48 f4       	brcc	.+18     	; 0xebe <__addsf3x+0x98>
     eac:	87 95       	ror	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f7 95       	ror	r31
     eb6:	9e 3f       	cpi	r25, 0xFE	; 254
     eb8:	08 f0       	brcs	.+2      	; 0xebc <__addsf3x+0x96>
     eba:	b3 cf       	rjmp	.-154    	; 0xe22 <__addsf3+0x1e>
     ebc:	93 95       	inc	r25
     ebe:	88 0f       	add	r24, r24
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <__addsf3x+0x9e>
     ec2:	99 27       	eor	r25, r25
     ec4:	ee 0f       	add	r30, r30
     ec6:	97 95       	ror	r25
     ec8:	87 95       	ror	r24
     eca:	08 95       	ret

00000ecc <__cmpsf2>:
     ecc:	6c d0       	rcall	.+216    	; 0xfa6 <__fp_cmp>
     ece:	08 f4       	brcc	.+2      	; 0xed2 <__cmpsf2+0x6>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	08 95       	ret

00000ed4 <__fixunssfsi>:
     ed4:	bc d0       	rcall	.+376    	; 0x104e <__fp_splitA>
     ed6:	88 f0       	brcs	.+34     	; 0xefa <__fixunssfsi+0x26>
     ed8:	9f 57       	subi	r25, 0x7F	; 127
     eda:	90 f0       	brcs	.+36     	; 0xf00 <__fixunssfsi+0x2c>
     edc:	b9 2f       	mov	r27, r25
     ede:	99 27       	eor	r25, r25
     ee0:	b7 51       	subi	r27, 0x17	; 23
     ee2:	a0 f0       	brcs	.+40     	; 0xf0c <__fixunssfsi+0x38>
     ee4:	d1 f0       	breq	.+52     	; 0xf1a <__fixunssfsi+0x46>
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	1a f0       	brmi	.+6      	; 0xef6 <__fixunssfsi+0x22>
     ef0:	ba 95       	dec	r27
     ef2:	c9 f7       	brne	.-14     	; 0xee6 <__fixunssfsi+0x12>
     ef4:	12 c0       	rjmp	.+36     	; 0xf1a <__fixunssfsi+0x46>
     ef6:	b1 30       	cpi	r27, 0x01	; 1
     ef8:	81 f0       	breq	.+32     	; 0xf1a <__fixunssfsi+0x46>
     efa:	c3 d0       	rcall	.+390    	; 0x1082 <__fp_zero>
     efc:	b1 e0       	ldi	r27, 0x01	; 1
     efe:	08 95       	ret
     f00:	c0 c0       	rjmp	.+384    	; 0x1082 <__fp_zero>
     f02:	67 2f       	mov	r22, r23
     f04:	78 2f       	mov	r23, r24
     f06:	88 27       	eor	r24, r24
     f08:	b8 5f       	subi	r27, 0xF8	; 248
     f0a:	39 f0       	breq	.+14     	; 0xf1a <__fixunssfsi+0x46>
     f0c:	b9 3f       	cpi	r27, 0xF9	; 249
     f0e:	cc f3       	brlt	.-14     	; 0xf02 <__fixunssfsi+0x2e>
     f10:	86 95       	lsr	r24
     f12:	77 95       	ror	r23
     f14:	67 95       	ror	r22
     f16:	b3 95       	inc	r27
     f18:	d9 f7       	brne	.-10     	; 0xf10 <__fixunssfsi+0x3c>
     f1a:	3e f4       	brtc	.+14     	; 0xf2a <__fixunssfsi+0x56>
     f1c:	90 95       	com	r25
     f1e:	80 95       	com	r24
     f20:	70 95       	com	r23
     f22:	61 95       	neg	r22
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	08 95       	ret

00000f2c <__floatunsisf>:
     f2c:	e8 94       	clt
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <__floatsisf+0x12>

00000f30 <__floatsisf>:
     f30:	97 fb       	bst	r25, 7
     f32:	3e f4       	brtc	.+14     	; 0xf42 <__floatsisf+0x12>
     f34:	90 95       	com	r25
     f36:	80 95       	com	r24
     f38:	70 95       	com	r23
     f3a:	61 95       	neg	r22
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	99 23       	and	r25, r25
     f44:	a9 f0       	breq	.+42     	; 0xf70 <__floatsisf+0x40>
     f46:	f9 2f       	mov	r31, r25
     f48:	96 e9       	ldi	r25, 0x96	; 150
     f4a:	bb 27       	eor	r27, r27
     f4c:	93 95       	inc	r25
     f4e:	f6 95       	lsr	r31
     f50:	87 95       	ror	r24
     f52:	77 95       	ror	r23
     f54:	67 95       	ror	r22
     f56:	b7 95       	ror	r27
     f58:	f1 11       	cpse	r31, r1
     f5a:	f8 cf       	rjmp	.-16     	; 0xf4c <__floatsisf+0x1c>
     f5c:	fa f4       	brpl	.+62     	; 0xf9c <__floatsisf+0x6c>
     f5e:	bb 0f       	add	r27, r27
     f60:	11 f4       	brne	.+4      	; 0xf66 <__floatsisf+0x36>
     f62:	60 ff       	sbrs	r22, 0
     f64:	1b c0       	rjmp	.+54     	; 0xf9c <__floatsisf+0x6c>
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	16 c0       	rjmp	.+44     	; 0xf9c <__floatsisf+0x6c>
     f70:	88 23       	and	r24, r24
     f72:	11 f0       	breq	.+4      	; 0xf78 <__floatsisf+0x48>
     f74:	96 e9       	ldi	r25, 0x96	; 150
     f76:	11 c0       	rjmp	.+34     	; 0xf9a <__floatsisf+0x6a>
     f78:	77 23       	and	r23, r23
     f7a:	21 f0       	breq	.+8      	; 0xf84 <__floatsisf+0x54>
     f7c:	9e e8       	ldi	r25, 0x8E	; 142
     f7e:	87 2f       	mov	r24, r23
     f80:	76 2f       	mov	r23, r22
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <__floatsisf+0x5e>
     f84:	66 23       	and	r22, r22
     f86:	71 f0       	breq	.+28     	; 0xfa4 <__floatsisf+0x74>
     f88:	96 e8       	ldi	r25, 0x86	; 134
     f8a:	86 2f       	mov	r24, r22
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	2a f0       	brmi	.+10     	; 0xf9c <__floatsisf+0x6c>
     f92:	9a 95       	dec	r25
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	da f7       	brpl	.-10     	; 0xf92 <__floatsisf+0x62>
     f9c:	88 0f       	add	r24, r24
     f9e:	96 95       	lsr	r25
     fa0:	87 95       	ror	r24
     fa2:	97 f9       	bld	r25, 7
     fa4:	08 95       	ret

00000fa6 <__fp_cmp>:
     fa6:	99 0f       	add	r25, r25
     fa8:	00 08       	sbc	r0, r0
     faa:	55 0f       	add	r21, r21
     fac:	aa 0b       	sbc	r26, r26
     fae:	e0 e8       	ldi	r30, 0x80	; 128
     fb0:	fe ef       	ldi	r31, 0xFE	; 254
     fb2:	16 16       	cp	r1, r22
     fb4:	17 06       	cpc	r1, r23
     fb6:	e8 07       	cpc	r30, r24
     fb8:	f9 07       	cpc	r31, r25
     fba:	c0 f0       	brcs	.+48     	; 0xfec <__fp_cmp+0x46>
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	e4 07       	cpc	r30, r20
     fc2:	f5 07       	cpc	r31, r21
     fc4:	98 f0       	brcs	.+38     	; 0xfec <__fp_cmp+0x46>
     fc6:	62 1b       	sub	r22, r18
     fc8:	73 0b       	sbc	r23, r19
     fca:	84 0b       	sbc	r24, r20
     fcc:	95 0b       	sbc	r25, r21
     fce:	39 f4       	brne	.+14     	; 0xfde <__fp_cmp+0x38>
     fd0:	0a 26       	eor	r0, r26
     fd2:	61 f0       	breq	.+24     	; 0xfec <__fp_cmp+0x46>
     fd4:	23 2b       	or	r18, r19
     fd6:	24 2b       	or	r18, r20
     fd8:	25 2b       	or	r18, r21
     fda:	21 f4       	brne	.+8      	; 0xfe4 <__fp_cmp+0x3e>
     fdc:	08 95       	ret
     fde:	0a 26       	eor	r0, r26
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <__fp_cmp+0x3e>
     fe2:	a1 40       	sbci	r26, 0x01	; 1
     fe4:	a6 95       	lsr	r26
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	81 1d       	adc	r24, r1
     fea:	81 1d       	adc	r24, r1
     fec:	08 95       	ret

00000fee <__fp_inf>:
     fee:	97 f9       	bld	r25, 7
     ff0:	9f 67       	ori	r25, 0x7F	; 127
     ff2:	80 e8       	ldi	r24, 0x80	; 128
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	08 95       	ret

00000ffa <__fp_nan>:
     ffa:	9f ef       	ldi	r25, 0xFF	; 255
     ffc:	80 ec       	ldi	r24, 0xC0	; 192
     ffe:	08 95       	ret

00001000 <__fp_pscA>:
    1000:	00 24       	eor	r0, r0
    1002:	0a 94       	dec	r0
    1004:	16 16       	cp	r1, r22
    1006:	17 06       	cpc	r1, r23
    1008:	18 06       	cpc	r1, r24
    100a:	09 06       	cpc	r0, r25
    100c:	08 95       	ret

0000100e <__fp_pscB>:
    100e:	00 24       	eor	r0, r0
    1010:	0a 94       	dec	r0
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	05 06       	cpc	r0, r21
    101a:	08 95       	ret

0000101c <__fp_round>:
    101c:	09 2e       	mov	r0, r25
    101e:	03 94       	inc	r0
    1020:	00 0c       	add	r0, r0
    1022:	11 f4       	brne	.+4      	; 0x1028 <__fp_round+0xc>
    1024:	88 23       	and	r24, r24
    1026:	52 f0       	brmi	.+20     	; 0x103c <__fp_round+0x20>
    1028:	bb 0f       	add	r27, r27
    102a:	40 f4       	brcc	.+16     	; 0x103c <__fp_round+0x20>
    102c:	bf 2b       	or	r27, r31
    102e:	11 f4       	brne	.+4      	; 0x1034 <__fp_round+0x18>
    1030:	60 ff       	sbrs	r22, 0
    1032:	04 c0       	rjmp	.+8      	; 0x103c <__fp_round+0x20>
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	8f 4f       	sbci	r24, 0xFF	; 255
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	08 95       	ret

0000103e <__fp_split3>:
    103e:	57 fd       	sbrc	r21, 7
    1040:	90 58       	subi	r25, 0x80	; 128
    1042:	44 0f       	add	r20, r20
    1044:	55 1f       	adc	r21, r21
    1046:	59 f0       	breq	.+22     	; 0x105e <__fp_splitA+0x10>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	71 f0       	breq	.+28     	; 0x1068 <__fp_splitA+0x1a>
    104c:	47 95       	ror	r20

0000104e <__fp_splitA>:
    104e:	88 0f       	add	r24, r24
    1050:	97 fb       	bst	r25, 7
    1052:	99 1f       	adc	r25, r25
    1054:	61 f0       	breq	.+24     	; 0x106e <__fp_splitA+0x20>
    1056:	9f 3f       	cpi	r25, 0xFF	; 255
    1058:	79 f0       	breq	.+30     	; 0x1078 <__fp_splitA+0x2a>
    105a:	87 95       	ror	r24
    105c:	08 95       	ret
    105e:	12 16       	cp	r1, r18
    1060:	13 06       	cpc	r1, r19
    1062:	14 06       	cpc	r1, r20
    1064:	55 1f       	adc	r21, r21
    1066:	f2 cf       	rjmp	.-28     	; 0x104c <__fp_split3+0xe>
    1068:	46 95       	lsr	r20
    106a:	f1 df       	rcall	.-30     	; 0x104e <__fp_splitA>
    106c:	08 c0       	rjmp	.+16     	; 0x107e <__fp_splitA+0x30>
    106e:	16 16       	cp	r1, r22
    1070:	17 06       	cpc	r1, r23
    1072:	18 06       	cpc	r1, r24
    1074:	99 1f       	adc	r25, r25
    1076:	f1 cf       	rjmp	.-30     	; 0x105a <__fp_splitA+0xc>
    1078:	86 95       	lsr	r24
    107a:	71 05       	cpc	r23, r1
    107c:	61 05       	cpc	r22, r1
    107e:	08 94       	sec
    1080:	08 95       	ret

00001082 <__fp_zero>:
    1082:	e8 94       	clt

00001084 <__fp_szero>:
    1084:	bb 27       	eor	r27, r27
    1086:	66 27       	eor	r22, r22
    1088:	77 27       	eor	r23, r23
    108a:	cb 01       	movw	r24, r22
    108c:	97 f9       	bld	r25, 7
    108e:	08 95       	ret

00001090 <__gesf2>:
    1090:	8a df       	rcall	.-236    	; 0xfa6 <__fp_cmp>
    1092:	08 f4       	brcc	.+2      	; 0x1096 <__gesf2+0x6>
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	08 95       	ret

00001098 <__mulsf3>:
    1098:	0b d0       	rcall	.+22     	; 0x10b0 <__mulsf3x>
    109a:	c0 cf       	rjmp	.-128    	; 0x101c <__fp_round>
    109c:	b1 df       	rcall	.-158    	; 0x1000 <__fp_pscA>
    109e:	28 f0       	brcs	.+10     	; 0x10aa <__mulsf3+0x12>
    10a0:	b6 df       	rcall	.-148    	; 0x100e <__fp_pscB>
    10a2:	18 f0       	brcs	.+6      	; 0x10aa <__mulsf3+0x12>
    10a4:	95 23       	and	r25, r21
    10a6:	09 f0       	breq	.+2      	; 0x10aa <__mulsf3+0x12>
    10a8:	a2 cf       	rjmp	.-188    	; 0xfee <__fp_inf>
    10aa:	a7 cf       	rjmp	.-178    	; 0xffa <__fp_nan>
    10ac:	11 24       	eor	r1, r1
    10ae:	ea cf       	rjmp	.-44     	; 0x1084 <__fp_szero>

000010b0 <__mulsf3x>:
    10b0:	c6 df       	rcall	.-116    	; 0x103e <__fp_split3>
    10b2:	a0 f3       	brcs	.-24     	; 0x109c <__mulsf3+0x4>

000010b4 <__mulsf3_pse>:
    10b4:	95 9f       	mul	r25, r21
    10b6:	d1 f3       	breq	.-12     	; 0x10ac <__mulsf3+0x14>
    10b8:	95 0f       	add	r25, r21
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	55 1f       	adc	r21, r21
    10be:	62 9f       	mul	r22, r18
    10c0:	f0 01       	movw	r30, r0
    10c2:	72 9f       	mul	r23, r18
    10c4:	bb 27       	eor	r27, r27
    10c6:	f0 0d       	add	r31, r0
    10c8:	b1 1d       	adc	r27, r1
    10ca:	63 9f       	mul	r22, r19
    10cc:	aa 27       	eor	r26, r26
    10ce:	f0 0d       	add	r31, r0
    10d0:	b1 1d       	adc	r27, r1
    10d2:	aa 1f       	adc	r26, r26
    10d4:	64 9f       	mul	r22, r20
    10d6:	66 27       	eor	r22, r22
    10d8:	b0 0d       	add	r27, r0
    10da:	a1 1d       	adc	r26, r1
    10dc:	66 1f       	adc	r22, r22
    10de:	82 9f       	mul	r24, r18
    10e0:	22 27       	eor	r18, r18
    10e2:	b0 0d       	add	r27, r0
    10e4:	a1 1d       	adc	r26, r1
    10e6:	62 1f       	adc	r22, r18
    10e8:	73 9f       	mul	r23, r19
    10ea:	b0 0d       	add	r27, r0
    10ec:	a1 1d       	adc	r26, r1
    10ee:	62 1f       	adc	r22, r18
    10f0:	83 9f       	mul	r24, r19
    10f2:	a0 0d       	add	r26, r0
    10f4:	61 1d       	adc	r22, r1
    10f6:	22 1f       	adc	r18, r18
    10f8:	74 9f       	mul	r23, r20
    10fa:	33 27       	eor	r19, r19
    10fc:	a0 0d       	add	r26, r0
    10fe:	61 1d       	adc	r22, r1
    1100:	23 1f       	adc	r18, r19
    1102:	84 9f       	mul	r24, r20
    1104:	60 0d       	add	r22, r0
    1106:	21 1d       	adc	r18, r1
    1108:	82 2f       	mov	r24, r18
    110a:	76 2f       	mov	r23, r22
    110c:	6a 2f       	mov	r22, r26
    110e:	11 24       	eor	r1, r1
    1110:	9f 57       	subi	r25, 0x7F	; 127
    1112:	50 40       	sbci	r21, 0x00	; 0
    1114:	8a f0       	brmi	.+34     	; 0x1138 <__mulsf3_pse+0x84>
    1116:	e1 f0       	breq	.+56     	; 0x1150 <__mulsf3_pse+0x9c>
    1118:	88 23       	and	r24, r24
    111a:	4a f0       	brmi	.+18     	; 0x112e <__mulsf3_pse+0x7a>
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	bb 1f       	adc	r27, r27
    1122:	66 1f       	adc	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	91 50       	subi	r25, 0x01	; 1
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	a9 f7       	brne	.-22     	; 0x1118 <__mulsf3_pse+0x64>
    112e:	9e 3f       	cpi	r25, 0xFE	; 254
    1130:	51 05       	cpc	r21, r1
    1132:	70 f0       	brcs	.+28     	; 0x1150 <__mulsf3_pse+0x9c>
    1134:	5c cf       	rjmp	.-328    	; 0xfee <__fp_inf>
    1136:	a6 cf       	rjmp	.-180    	; 0x1084 <__fp_szero>
    1138:	5f 3f       	cpi	r21, 0xFF	; 255
    113a:	ec f3       	brlt	.-6      	; 0x1136 <__mulsf3_pse+0x82>
    113c:	98 3e       	cpi	r25, 0xE8	; 232
    113e:	dc f3       	brlt	.-10     	; 0x1136 <__mulsf3_pse+0x82>
    1140:	86 95       	lsr	r24
    1142:	77 95       	ror	r23
    1144:	67 95       	ror	r22
    1146:	b7 95       	ror	r27
    1148:	f7 95       	ror	r31
    114a:	e7 95       	ror	r30
    114c:	9f 5f       	subi	r25, 0xFF	; 255
    114e:	c1 f7       	brne	.-16     	; 0x1140 <__mulsf3_pse+0x8c>
    1150:	fe 2b       	or	r31, r30
    1152:	88 0f       	add	r24, r24
    1154:	91 1d       	adc	r25, r1
    1156:	96 95       	lsr	r25
    1158:	87 95       	ror	r24
    115a:	97 f9       	bld	r25, 7
    115c:	08 95       	ret

0000115e <__mulsi3>:
    115e:	62 9f       	mul	r22, r18
    1160:	d0 01       	movw	r26, r0
    1162:	73 9f       	mul	r23, r19
    1164:	f0 01       	movw	r30, r0
    1166:	82 9f       	mul	r24, r18
    1168:	e0 0d       	add	r30, r0
    116a:	f1 1d       	adc	r31, r1
    116c:	64 9f       	mul	r22, r20
    116e:	e0 0d       	add	r30, r0
    1170:	f1 1d       	adc	r31, r1
    1172:	92 9f       	mul	r25, r18
    1174:	f0 0d       	add	r31, r0
    1176:	83 9f       	mul	r24, r19
    1178:	f0 0d       	add	r31, r0
    117a:	74 9f       	mul	r23, r20
    117c:	f0 0d       	add	r31, r0
    117e:	65 9f       	mul	r22, r21
    1180:	f0 0d       	add	r31, r0
    1182:	99 27       	eor	r25, r25
    1184:	72 9f       	mul	r23, r18
    1186:	b0 0d       	add	r27, r0
    1188:	e1 1d       	adc	r30, r1
    118a:	f9 1f       	adc	r31, r25
    118c:	63 9f       	mul	r22, r19
    118e:	b0 0d       	add	r27, r0
    1190:	e1 1d       	adc	r30, r1
    1192:	f9 1f       	adc	r31, r25
    1194:	bd 01       	movw	r22, r26
    1196:	cf 01       	movw	r24, r30
    1198:	11 24       	eor	r1, r1
    119a:	08 95       	ret

0000119c <__udivmodhi4>:
    119c:	aa 1b       	sub	r26, r26
    119e:	bb 1b       	sub	r27, r27
    11a0:	51 e1       	ldi	r21, 0x11	; 17
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <__udivmodhi4_ep>

000011a4 <__udivmodhi4_loop>:
    11a4:	aa 1f       	adc	r26, r26
    11a6:	bb 1f       	adc	r27, r27
    11a8:	a6 17       	cp	r26, r22
    11aa:	b7 07       	cpc	r27, r23
    11ac:	10 f0       	brcs	.+4      	; 0x11b2 <__udivmodhi4_ep>
    11ae:	a6 1b       	sub	r26, r22
    11b0:	b7 0b       	sbc	r27, r23

000011b2 <__udivmodhi4_ep>:
    11b2:	88 1f       	adc	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	5a 95       	dec	r21
    11b8:	a9 f7       	brne	.-22     	; 0x11a4 <__udivmodhi4_loop>
    11ba:	80 95       	com	r24
    11bc:	90 95       	com	r25
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	08 95       	ret

000011c4 <__udivmodsi4>:
    11c4:	a1 e2       	ldi	r26, 0x21	; 33
    11c6:	1a 2e       	mov	r1, r26
    11c8:	aa 1b       	sub	r26, r26
    11ca:	bb 1b       	sub	r27, r27
    11cc:	fd 01       	movw	r30, r26
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <__udivmodsi4_ep>

000011d0 <__udivmodsi4_loop>:
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	ee 1f       	adc	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	a2 17       	cp	r26, r18
    11da:	b3 07       	cpc	r27, r19
    11dc:	e4 07       	cpc	r30, r20
    11de:	f5 07       	cpc	r31, r21
    11e0:	20 f0       	brcs	.+8      	; 0x11ea <__udivmodsi4_ep>
    11e2:	a2 1b       	sub	r26, r18
    11e4:	b3 0b       	sbc	r27, r19
    11e6:	e4 0b       	sbc	r30, r20
    11e8:	f5 0b       	sbc	r31, r21

000011ea <__udivmodsi4_ep>:
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	1a 94       	dec	r1
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <__udivmodsi4_loop>
    11f6:	60 95       	com	r22
    11f8:	70 95       	com	r23
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	bd 01       	movw	r22, r26
    1204:	cf 01       	movw	r24, r30
    1206:	08 95       	ret

00001208 <_exit>:
    1208:	f8 94       	cli

0000120a <__stop_program>:
    120a:	ff cf       	rjmp	.-2      	; 0x120a <__stop_program>
